---
title: "Latent continuous variables"
author: "Andrew MacDonald"
description: |
  Modelling continuous latent states in Stan.
date: 20 March 2023
editor: source
categories: [UdeS, stan]
draft: false
---

```{r setup, eval=TRUE, message=FALSE, warning=FALSE}
library(targets)
library(ggplot2)
library(tidyverse)
library(tidybayes)
```

Imagine we have many measurments, all correlated with each other. Where do these correlations come from?
One possibility is that all these measurents are _caused_ by the values of some unobservable, latent trait. 
This happens in ecology when we imagine that, for example, the **Competitive Ability** of a species appears to us in the form of measurable traits that (to us) seem to represent this trait: leaf size, growth rate, alleopathy, etc. 

![Five different observable variables (in squares), all caused by one latent variable (round).](dag.png)

In mathematics, this model is the following:

$$
\begin{align}
Y_{ij} &\sim \text{Normal}(\mu_{ij}, \sigma) \\
\mu_{ij} &= \alpha_i \times \beta_j\\
\boldsymbol{ \alpha } &\sim \text{Normal}(0, 1) \\
\boldsymbol{ \beta } &\sim \text{Normal}(0, 1) \\

\end{align}
$$


```{r}
set.seed(1234)

alpha <- runif(200, min = -2, max = 2)

five_betas <- c(2,-1, .5, 1, -.3)

sigma_obs <- .6

ymean <- alpha %o% five_betas

## sample a random number for each of these and put in back

ind <- which(ymean != 0, arr.ind = TRUE)

yobs <- matrix(rep(0L, times = 200*5), nrow = 200, ncol = 5)
yobs[ind] <- rnorm(n = 200*5, mean = ymean[ind], sd = sigma_obs)
```

:::{.callout-warning}
My toxic trait is that I like for-loops but never write them
:::


```{r pairsplot}

pairs(yobs)
```


```{r}
library(cmdstanr)

latent_continuous <- cmdstan_model(
  stan_file = here::here("posts/2023-03-20-latent-continuous/latent_continuous.stan"))


datalist <- list(N = nrow(yobs),
                 y = yobs)

latent_cont_samp <- latent_continuous$sample(
  data = datalist, parallel_chains = 4, refresh = 0)
```

```{r}
latent_cont_samp
```

that was.. a spectacular failure! is there a way that actully works

```{r}
library(cmdstanr)
latent_cont_constrained <- cmdstan_model(
  stan_file = here::here(
    "posts/2023-03-20-latent-continuous/latent_cont_constrained.stan"))

latent_cont_constrained_samp <- latent_cont_constrained$sample(
  data = datalist, parallel_chains = 4, refresh = 0)

# tidybayes::get_variables(latent_cont_constrained_samp)
```

```{r}
tidybayes::gather_rvars(latent_cont_constrained_samp, betatrans[id]) |> 
  mutate(true_value = five_betas) |> 
  ggplot(aes(x = id, dist  = .value)) + 
  tidybayes::stat_halfeye(fill = "darkgreen") + 
  geom_point(aes(x = id, y = true_value), pch = 21, fill = "orange", size = 5)

```

So it seems that with some simple constraints on the signs, this model samples just fine! 


Does it also get the latent states right? 

```{r}
tidybayes::summarise_draws(latent_cont_constrained_samp, quantile) |> 
  filter(stringr::str_detect(variable, "alpha")) |> 
  bind_cols(true_alpha = alpha) |> 
  mutate(id = readr::parse_number(variable),
         rnk = dense_rank(true_alpha)) |> 
  ggplot(aes(x = `25%`, xend = `75%`, y = rnk, yend = rnk)) + 
  geom_segment() + 
  geom_point(aes(x = true_alpha, y  = rnk), inherit.aes = FALSE, col = "red")
```


What if we experiment with a standard deviation for the alpha (ie a hierarchical model)

```{r}

latent_cont_constr_hier <- cmdstan_model(
  stan_file = here::here("posts/2023-03-20-latent-continuous/latent_cont_constr_hier.stan"))

latent_cont_constr_hier_samp <- latent_cont_constr_hier$sample(
  data = datalist, parallel_chains = 4, refresh = 0)

tidybayes::summarise_draws(latent_cont_constr_hier_samp, quantile) |> 
  filter(stringr::str_detect(variable, "alpha\\[")) |> 
  bind_cols(true_alpha = alpha) |> 
  mutate(id = readr::parse_number(variable),
         rnk = dense_rank(true_alpha)) |> 
  ggplot(aes(x = `25%`, xend = `75%`, y = rnk, yend = rnk)) + 
  geom_segment() + 
  geom_point(aes(x = true_alpha, y  = rnk), inherit.aes = FALSE, col = "red")
```

