---
title: "Modelling discrete growth"
author: "Andrew MacDonald, Kelly Forester"
description: |
  How to model the growth of things in a sensible fashion
date: 7 Nov 2023
editor: source
draft: false
categories: [UdeS, stan]
editor_options: 
  chunk_output_type: console
---

```{r setup, eval=TRUE, message=FALSE, warning=FALSE}
library(brms)
library(ggplot2)
library(tidyverse)
library(tidybayes)
library(cmdstanr)
```

##  Growing things get bigger

The classic Von Bertalanffy growth equation has animals growing from a starting size to a final asymptotic size:

$$
L_t = L_0e^{-rt} + L_{max}(1 - e^{-rt})
$$

* $L_0$ is the starting size
* $L_{max}$ is the final size
* $r$ is a growth rate

This equation yields a decelerating curve between the starting size and the final size, like this::

```{r}
#| fig-cap: "VB Growth equation, with $L_0$ = 13, $L_{\text{max}} = 120$, and $r = .3$. 
#| These are approximate values for a curve that describes growth in kangaroos."
L0 <- 13
Lmax <- 120
r <- .3
curve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)), xlim = c(0, 20))
```

### Discrete Time.

The equation above is written in continuous time. 
There are a few reasons to treat growth as discrete and not continuous.
However, sometimes we measure organisms at discrete moments in time. 
Animals might also only change in size during the growing season, and it can be useful to think of their growth occurring in discrete intervals. 
Finally, we might want to consider that the growth rate (for example) is constant within a year, but variable in between years. 
This becomes easier to think about if we let growth be discrete.

The discrete-time version fo this approach just replaces $L_0$ with the previous time's size:

$$
L_t = L_{t-1} e^{-rt} + L_{max}(1 - e^{-rt})
$$

```{r}
vb_disc <- function(L_tm1, r, time, Lmax) {
  L_tm1 * exp(-r*time) + Lmax*(1 - exp(-r * time))
}

timevec <- rep(1, times = 13)
size <- numeric(length(timevec)+1)
size[1] <- 13

for (t in 1:length(timevec)){
  size[t+1] = vb_disc(size[t],
                      r = r,
                      time = timevec[t],
                      Lmax = Lmax)
}

curve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)),
      xlim = c(0, 20))
points(cumsum(c(0,timevec)), size)

```

This works even if the points we measure at are not regular:

```{r}

timevec <- runif(n = 13, min = .7, max = 3)
size <- numeric(length(timevec)+1)
size[1] <- 13

for (t in 1:length(timevec)){
  size[t+1] = vb_disc(size[t],
                      r = r,
                      time = timevec[t],
                      Lmax = Lmax)
}

curve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)),
      xlim = c(0, 20))
points(cumsum(c(0,timevec)), size)
```

So we can see that this is the same equation. 


### Measurement error: doing it wrong

:::{.callout-warning}
## error
The stuff below is close but not quite. I made it based ont eh AR-1 model. however, in this model the uncertainty captured by the parameter $/sigma$ is actually process uncertainty, not measurement error! That is, it is fluctuations in intrisic growth rate that are not captured in the model. 
:::

<!-- maybe I'm too set on optimization. would it be possible to calculate all the function in a for loop in the transformed parameters block, and just to measurement error and the shifting of the whole thing left and right in the model block -->


Let's simulate observations of a growing animal with measurement error

```{r}
L0 <- 13
Lmax <- 120
r <- .3
sigma = 2

grow_data <- tibble(time = seq(from = .5, to = 21, length.out = 40),
       size = L0 * exp(-r* time) + Lmax*(1 - exp(-r * time)),
       size_obs = rnorm(n = length(size), mean = size, sd = sigma))

grow_data |> 
  ggplot(aes(x = time, y = size_obs)) + geom_point()
```

## Translating the model to Stan

```{r}
#| class-output: stan
vb_discrete <- cmdstan_model(
  here::here(
    "posts/2023-10-23-discrete-vb-brms-stan/vb_discrete_meas.stan"),
  pedantic = TRUE)

vb_discrete 

```

```{r message=FALSE, warning=FALSE}
some_obs <- grow_data |> 
  mutate(sampled = sample(sample(0:1, length(time), replace = TRUE, prob = c(.4, .6)))) |> 
  filter(sampled > 0) |> 
  # lagged time
  mutate(time_diff = time - lag(time))

first <- some_obs |> head(1)
rest <- some_obs |> slice(-1)

diff_pred <- c(rep(2, times = 5), rep(5, 3))

vb_discrete_post <- vb_discrete$sample(
  data = list(
    n = nrow(some_obs),
    time_diff = rest$time_diff,
    age_first_meas = first$time,
    obs_size = some_obs$size_obs,
    n_pred = length(diff_pred) + 1,
    diff_pred = diff_pred
  ),
  refresh = 0
  )
```

```{r}
#| classes: preview-image 

vb_discrete_post$draws() |> 
  gather_rvars(mu[i]) |> 
  mutate(time = cumsum(c(0, diff_pred))) |> 
  ggplot(aes(x = time, dist = .value)) + 
  stat_lineribbon() + 
  scale_fill_brewer(palette = "Greens") +
  geom_point(aes(x = time, y = size_obs), 
             inherit.aes = FALSE, data = grow_data)
```

```{r}
vb_discrete_post$summary()
```

## can it be written in BRMS?

What are the results from a similar model in brms? Using a lagged column of size.

This feels like a different model, but at least in this simple example, the posterior is close to the real value. 

```{r}


## add a lagged growth measurement
lagged_obs <- some_obs |> 
  mutate(sizelast = lag(size_obs)) |> 
  # drop first row
  slice(-1)

vb_formula <- bf(size_obs ~ sizelast * exp(- exp(logR) * time_diff) + 
                   sizeMax * (1 - exp(-exp(logR) * time_diff)),
                 logR ~ 1,
                 sizeMax ~ 1, nl = TRUE)


get_prior(vb_formula, data = lagged_obs)

vb_prior <- c(
  prior(normal(120, 10), nlpar = "sizeMax", class = "b"),
  prior(normal(0, 1), nlpar = "logR", class = "b"),
  prior(exponential(1), class = "sigma")
)


vb_post <- brm(vb_formula, 
               data = lagged_obs,
               prior = vb_prior,
               file = here::here("posts/2023-10-23-discrete-vb-brms-stan/vb_brms.rds"), refresh = 0)

```

```{r}
summary(vb_post)

rv <- c("b_logR_Intercept" = "r", 
        "b_sizeMax_Intercept" = "sizeMax")


vb_post |> 
  gather_rvars(b_logR_Intercept, b_sizeMax_Intercept) |> 
  mutate(.value = if_else(.variable == "b_logR_Intercept", exp(.value), .value),
         parname = rv[.variable]) |> 
  ggplot(aes(x = parname, dist = .value)) + stat_pointinterval() + 
  facet_wrap(~parname, scales = "free") + 
  geom_point(aes(x = parname, y = value), 
             inherit.aes = FALSE,
             data = tribble(
               ~parname, ~value,
               "r"      , r,
               "sizeMax", Lmax
             ), col = "red", size = 4)
```

### Measurment error -- doing it correctly


```{r}

L0 <- 11
Lmax <- 420
r <- .4

timevec <- rep(1, times = 13)
size <- numeric(length(timevec)+1)
size[1] <- 13

rvec_log <- rnorm(n = length(timevec), 
              mean = log(r),
              sd = .5)

  
  
for (t in 1:length(timevec)){
  size[t+1] = vb_disc(size[t],
                      r = exp(rvec_log[t]),
                      time = timevec[t],
                      Lmax = Lmax)
}

curve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)),
      xlim = c(0, 14), xlab = "Age (years)", ylab = "Size")
points(cumsum(c(0,timevec)), size, pch = 21, bg = "red")

## adding measurement error to that!
meas_error <- rnorm(length(size), mean = 0, sd = 2)
points(cumsum(c(0,timevec)), size+meas_error, pch = 21, bg = "orange")

size_me <- size + meas_error
```


```{r}
#| class-output: stan
vb_discrete_loop_me <- cmdstan_model(
  here::here(
    "posts/2023-10-23-discrete-vb-brms-stan/vb_discrete_loop_me.stan"),
  pedantic = TRUE)

vb_discrete_loop_me 

```

```{r}
vb_discrete_loop <- vb_discrete_loop_me$sample(
  data = list(
    n = length(size_me),
    age_first_meas = 1,
    obs_size = size_me,
    time_diff = timevec
  ),
  refresh = 500,
  parallel_chains = 4
)

vb_discrete_loop
```



```{r}
#| class-output: stan
vb_discrete_loop_me <- cmdstan_model(
  here::here(
    "posts/2023-10-23-discrete-vb-brms-stan/vb_discrete_loop_rvar_me.stan"),
  pedantic = TRUE)

vb_discrete_loop_me 

```

```{r}
vb_discrete_loop <- vb_discrete_loop_me$sample(
  data = list(
    n = length(size_me),
    age_first_meas = 1,
    obs_size = size_me,
    time_diff = timevec
  ),
  refresh = 500,
  parallel_chains = 4
)

vb_discrete_loop$summary(variables = c("Lstart", "Lmax", "sigma"))
```



a flexible sigmoidal model

https://www.mdpi.com/2073-8994/11/2/204

accounting for temporal and individual 
https://edepot.wur.nl/585090

shelton and mangel -- indiv var and environ
https://www.tandfonline.com/doi/pdf/10.1080/17513758.2012.697195

Statistical Properties of Alternative Parameterizations of the von Bertalanffy Growth Curve
https://cdnsciencepub.com/doi/10.1139/f86-091


