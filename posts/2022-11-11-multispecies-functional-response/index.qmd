---
title: "Fitting a multispecies functional response in Stan"
author: "Andrew MacDonald & Ben Mercier"
description: |
  How many things get eaten, if more than one animal gets eaten?
date: 11 Nov 2022
categories: [UdeS, stan]
bibliography: references.bib
---

```{r setup, eval=TRUE, message=FALSE, warning=FALSE}
library(targets)
library(ggplot2)
library(tidyverse)
library(tidybayes)
library(cmdstanr)
library(stantargets)
```

## The equation

Predators eat prey. They eat prey faster when there is more prey -- though they do have to slow down to catch, kill, and chew.[^1]

[^1]: Things that eat plants have to do the same; replace "kill" with "peel" etc.

If a predator can eat multiple things, then they might end up eating less of any one prey because they spread their kills around among all their prey. In the very simplest case, they do this in proportion to how frequent the different prey are -- the predator has no preference, it just goes around randomly and eats what it finds

The classic OG version of this model comes from @holling1966

$$
A = \frac{\alpha N}{1 + h\alpha N}
$$ {#eq-type2}

where

-   N is the number of prey
-   $\alpha$ is the attack rate
-   $h$ is the handling time

And altogether you get the number of attacks $A$ on prey in some unit of time.

## multiple species

Suppose you have more than one species in this system. You could then rewrite @eq-type2 to allow multiple animals to be included in the predation:

$$
A_i = \frac{\alpha N_i}{1 + h\alpha \sum_{j = 1}^s N_j}
$$ {#eq-mstype2}

here $\sum_{j = 1}^s N_j$ means the sum over the abundances of all the prey. The subscript $i$ just means that we are talking about one particular prey, which we label $i$. This prey is included in the summation in the denominator.

It's common to consider that different prey species might be attacked or handled at different rates [@smith2020] [@smout2010a]

## One species model

Let's begin with the classic model and add complexity later.  
I think it helps to think of predation as a binomial trial: out of so many prey individuals ($N$), some of them get attacked ($A$).

$$
\begin{align}
A &\sim \text{Binomial}(p, N) \\
p &= \frac{\alpha}{1 + h\alpha N} \\
\alpha &\sim \text{Beta}(2, 4) \\
h &\sim \text{LogNormal}(0,1)
\end{align}
$$
some things to note:

* the $N$ now appears in the Binomial distribution as a separate parameter, not in the expression for the probability of attack.
Remember that the mean of a Binomial is $pN$, so in this case we will come back to @eq-type2

* both the parameters have constraints: $a$ cannot be outside of $[0,1]$, and $h$ cannot be negative. We choose priors that respect these constraints!

Let's translate this into Stan and take a look:

```{r simple_type2}
#| class.output: stan

simple_type2 <- cmdstan_model(here::here("posts", 
                                         "2022-11-11-multispecies-functional-response",
                                         "simple_type2.stan"))

simple_type2
```

the code above is mostly a direct translation of the equations. 
One technique is worth noting: the types of the input vectors. 
Binomial distributions deal in integers, and so we define `densities` and `attacks` as integers.
However, in order to vectorize our calculations, we massage the input data from an array of integers to a vector of real numbers using `to_vector`. 
This highlights an important difference between R and Stan.
Stan requires careful definition of the types of data, where R is much more informal. 

## simulate from a model:

```{r}
generate_one_spp_type_2 <- function(){
  true_a <- stats::rbeta(n = 1, 8, 4)
  true_h <- stats::rlnorm(n = 1, -2, .5)
  densities <- seq(from = 5, to = 100, by =5)
  prob <- true_a/(1 + true_a * true_h * densities)
  attacks <- rbinom(n = length(densities), size = densities, prob = prob)
  list(true_a = true_a,
       true_h = true_h,
       densities = densities,
       attacks = attacks, 
       prob = prob)
}

one_spp_sim <- generate_one_spp_type_2()

one_spp_sim

with(one_spp_sim, rbinom(n = length(densities), size = densities, prob = prob))

with(one_spp_sim, plot(densities, prob*densities))

with(one_spp_sim, plot(densities, attacks))
```

try it in targets:

```{r, include=FALSE}
tar_unscript()
```

```{targets some-globals, tar_globals = TRUE, tar_interactive = FALSE}

tar_option_set(packages = c("cmdstanr",
               "ggplot2", "tidybayes", 
               "stantargets"))

generate_one_spp_type_too <- function(){
  true_a <- stats::rbeta(n = 1, 8, 4)
  true_h <- stats::rlnorm(n = 1, -2, .5)
  densities <- seq(from = 5, to = 100, by =5)
  prob <- true_a/(1 + true_a * true_h * densities)
  attacks <- rbinom(n = length(densities), size = densities, prob = prob)
  list(
    N = length(attacks),
    true_a = true_a,
    true_h = true_h,
    densities = densities,
    attacks = attacks, 
    prob = prob
    )
}

```

```{targets run_one_model}
list(
  stantargets::tar_stan_mcmc(name = one_spp, 
                stan_files = "simple_type2.stan",
                data = generate_one_spp_type_too(),
                stdout = R.utils::nullfile(),
                stderr = R.utils::nullfile()
  )
)
```


```{r}
tar_visnetwork()
```


```{r}
tar_make()
```


```{r}
tar_load(one_spp_draws_simple_type2)
```





