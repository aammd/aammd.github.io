---
title: "MARS models in Stan"
author: "Andrew MacDonald"
description: |
  Getting an interaction matrix from time series data
date: 11 Sept 2024
editor: source
categories: [UdeS, stan]
draft: true
editor_options: 
  chunk_output_type: console
---


The MARS model is really commonly used to infer interaction strength from a time series of population sizes.

here is it is in R:

```{r}
library(tidyverse)
```


```{r}
S <- 5

B <- matrix(rnorm(S*S, mean = 0, sd = .2), ncol=S, nrow=S)
diag(B) <- rbeta(S, .6*7, .4*7)
A <- rnorm(S, .2, .2)

nsteps <- 20
pop_sizes <- matrix(0, nrow = S, ncol = nsteps)
start <- rep(log(20), times = S)
pop_sizes[,1] <- start

for (i in 2:nsteps){
  pop_sizes[,i] <- A + B %*% pop_sizes[,i-1]
}

pop_sizes_long <- pop_sizes |> 
  as.data.frame() |> 
  rownames_to_column(var = "sp") |> 
  pivot_longer(-sp, names_to = "time", values_to = "abd") |> 
  mutate(time = parse_number(time))

pop_sizes_long |> 
  ggplot(aes(x = time, y = exp(abd), group = sp)) + geom_line()
```

let's run a few different simulations just to see

```{r}
some_simulations <- map_df(1:6,
                           \(x) {
                             S <- 5
                             
                             B <- matrix(rnorm(S*S, mean = 0, sd = .2),
                                         ncol=S,
                                         nrow=S)
                             diag(B) <- runif(S)
                             A <- runif(S)
                             
                             nsteps <- 20
                             pop_sizes <- matrix(0, nrow = S, ncol = nsteps)
                             start <- rep(20, times = S)
                             pop_sizes[,1] <- start
                             
                             for (i in 2:nsteps){
                               pop_sizes[,i] <- A + B %*% pop_sizes[,i-1]
                             }
                             
                             pop_sizes_long <- pop_sizes |> 
                               as.data.frame() |> 
                               rownames_to_column(var = "sp") |> 
                               pivot_longer(-sp, 
                                            names_to = "time", 
                                            values_to = "abd") |> 
                               mutate(time = parse_number(time))},
                           .id = "sim")

some_simulations |> 
  ggplot(aes(x = time, y = abd, group = sp)) + geom_line() + 
  facet_wrap(~sim)
```

The MARS model also allows for some variation to occur at each time step: 

```{r}
set.seed(1618)
some_simulations <- map_df(1:6,
                           \(x) {
                             S <- 5
                             
                             B <- matrix(rnorm(S*S, mean = 0, sd = .1),
                                         ncol=S,
                                         nrow=S)
                             diag(B) <- runif(S, min = .3, max = .6)
                             A <- rnorm(S, mean = 2, sd = .2)
                             
                             nsteps <- 20
                             pop_sizes <- matrix(0, nrow = S, ncol = nsteps)
                             start <- rep(3, times = S)
                             pop_sizes[,1] <- start
                             
                             for (i in 2:nsteps){
                               pop_sizes[,i] <- A + 
                                 B %*% pop_sizes[,i-1] + 
                                 ## variation at each timestep
                                 rnorm(S, mean = 0, sd = .1)
                             }
                             
                             pop_sizes_long <- pop_sizes |> 
                               as.data.frame() |> 
                               rownames_to_column(var = "sp") |> 
                               pivot_longer(-sp, 
                                            names_to = "time", 
                                            values_to = "abd") |> 
                               mutate(time = parse_number(time))},
                           .id = "sim")

some_simulations |> 
  ggplot(aes(x = time, 
             y = exp(abd), 
             group = sp)) + geom_line() + 
  facet_wrap(~sim)

```

Finally, the observations around these are poisson variables:

```{r}
some_simulations |> 
  mutate(obs_abd = rpois(n = length(abd), lambda = exp(abd))) |> 
  ggplot(aes(x = time, 
             y = obs_abd, 
             group = sp)) + geom_point() + 
  facet_wrap(~sim)
```

## write the model in Stan

```{r}
library(cmdstanr)
```


```{r}
#|class-output: stan
#|
mars_poisson_prior <- cmdstan_model(here::here("posts/2024-09-11-MARS/mars_poisson_prior.stan"))

mars_poisson_prior
```

```{r}
mars_poisson_prior_samp <- mars_poisson_prior$sample(data = list(
  S = 4,
  n_time = 15,
  abds = rep(1, times = 4*15),
  starting = rep(log(20), 4)),
  chains = 1,
  iter_sampling = 500,
  init = 0
)
```

```{r}
library(tidybayes)
mars_poisson_prior_samp$draws() |> 
  gather_draws(sim_abds[time, sp], ndraws = 12) |> 
  ggplot(aes(x = time, y = .value, group = sp)) + geom_point() + 
  facet_wrap(~.draw, scales = "free_y", ncol = 4)
```

```{r}
library(tidybayes)
mars_poisson_prior_samp$draws() |> 
  gather_draws(true_abd[sp, time], ndraws = 12) |> 
  ggplot(aes(x = time, y = exp(.value), group = sp)) + 
  geom_line() + 
  facet_wrap(~.draw, scales = "free_y", ncol = 4)
```

## parameter recovery

Time to test if this model can recover known parameters! 
Here is the simulated data from above

```{r}
one_sim_obs <- some_simulations |> 
  filter(sim == 5) |> 
  mutate(obs_abd = rpois(n = length(abd),
                         lambda = exp(abd))
         )
one_sim_obs


```

Now I'm going to format this data and feed it into the Stan model


```{r}
#|class-output: stan
#|
mars_poisson <- cmdstan_model(here::here("posts/2024-09-11-MARS/mars_poisson.stan"))

mars_poisson
```

```{r}
one_sim_sorted <- one_sim_obs |> 
  mutate(sp = parse_number(sp)) |> 
  arrange(time) |> 
  # drop first time because 
  # there are no *observations* to model
  filter(time > 1) |> 
  # setup is t = 0, first obs is t = 1
  mutate(time = time -1)

mars_poisson_samp <- mars_poisson$sample(
  data = list(
    S = max(one_sim_sorted$sp),
    n_time = max(one_sim_sorted$time),
    abds = one_sim_sorted$obs_abd,
    starting = rep(3, 5)),
  parallel_chains = 4,
  refresh = 200,
  init = 0
  )


```

```{r}
#| layout-ncol: 2
#| fig-cap: 
#|   - "This model has a parameter for the unmeasured true abundance. Here it is vs the real true abundance from the simulated dataset. Note that both are shown on the log scale"
#|   - "simulated observations compared to predicted observations"
mars_poisson_samp |> 
  gather_rvars(true_abd[sp, time]) |> 
  ggplot(aes(x = time,
             ydist = .value,
             group = sp)) + 
  stat_lineribbon() + 
  scale_fill_brewer(palette = "Greens") + 
  geom_point(aes(x = time, y = abd),
             data = one_sim_sorted,
             pch = 21, fill = "orange",
             inherit.aes = FALSE)

mars_poisson_samp |> 
  gather_rvars(sim_abds[time, sp]) |> 
  ggplot(aes(x = time,
             ydist = .value,
             group = sp)) + 
  stat_lineribbon() + 
  scale_fill_brewer(palette = "Greens") + 
  geom_point(aes(x = time, y = obs_abd),
             data = one_sim_sorted,
             pch = 21, fill = "orange",
             inherit.aes = FALSE)
```



## multiple assemblages


```{r}
mars_poisson_assemblage_datafmt <- cmdstan_model("posts/2024-09-11-MARS/mars_poisson_assemblage_datafmt.stan")
```

will it accept data without complaining?
```{r}
mars_poisson_assemblage_datafmt$sample(
  data = list(
    S = 4,
    n_assemblage = 3,
    S_each = c(3,4,3),
    n_time_each = c(3, 8, 5),
    n_shared = c(0,3,3),
    n_introd = c(3,1,0),
    obs = rpois(c(3, 8, 5) %*% c(3,4,3), 
                lambda = 45),
    starting = c(16, 16, 16, 5),
    introd_seq = c(1, 2, 3, 4),
    shared_grp = c(1,2,3,1,2,3)
  )
)
```

now with the full thing

```{r}
mars_poisson_assemblage <- cmdstan_model("posts/2024-09-11-MARS/mars_poisson_assemblage.stan")

mars_poisson_assemblage_samp <- mars_poisson_assemblage$sample(
  data = list(
    S = 4,
    n_assemblage = 3,
    S_each = c(3,4,3),
    n_time_each = c(3, 8, 5),
    n_shared = c(0,3,3),
    n_introd = c(3,1,0),
    obs = rpois(c(3, 8, 5) %*% c(3,4,3), 
                lambda = 45),
    starting = c(16, 16, 16, 5),
    introd_seq = c(1, 2, 3, 4),
    shared_grp = c(1,2,3,1,2,3)
  ), 
  chains = 1,
  iter_sampling = 200
)
```


would it make sense to model the off-diagonal elements symmetrically? like for each species have:
* an average effect on others (column)
* an average effect BY others (row)
* a degree of asymmetry with its partner? or perhaps just a random effect for every off-diagonal at that point



