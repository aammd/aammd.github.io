[
  {
    "objectID": "posts/2022-11-24-updating-R-and-packages/index.html",
    "href": "posts/2022-11-24-updating-R-and-packages/index.html",
    "title": "Updating R and your R packages",
    "section": "",
    "text": "I teach a few R workshops a year, and I often send out the typical “make sure R and Rstudio is up-to-date, using these helpful links. And then of course the workshop starts, and all the class notices that I myself have not updated R in .. 7 months.\nWhen I do decide to do it, I find I often need to google the correct procedure. In the spirit of this blog, here is a short note detailing the process, inspired by this stackoverflow note"
  },
  {
    "objectID": "posts/2022-11-11-multispecies-functional-response/index.html",
    "href": "posts/2022-11-11-multispecies-functional-response/index.html",
    "title": "Fitting a multispecies functional response in Stan",
    "section": "",
    "text": "library(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)"
  },
  {
    "objectID": "posts/2022-11-11-multispecies-functional-response/index.html#the-equation",
    "href": "posts/2022-11-11-multispecies-functional-response/index.html#the-equation",
    "title": "Fitting a multispecies functional response in Stan",
    "section": "The equation",
    "text": "The equation\nPredators eat prey. They eat prey faster when there is more prey – though they do have to slow down to catch, kill, and chew.1\nIf a predator can eat multiple things, then they might end up eating less of any one prey because they spread their kills around among all their prey. In the very simplest case, they do this in proportion to how frequent the different prey are – the predator has no preference, it just goes around randomly and eats what it finds\nThe classic OG version of this model comes from Holling (1966)\n\\[\nA = \\frac{\\alpha N}{1 + h\\alpha N}\n\\tag{1}\\]\nwhere\n\nN is the number of prey\n\\(\\alpha\\) is the attack rate\n\\(h\\) is the handling time\n\nAnd altogether you get the number of attacks \\(A\\) on prey in some unit of time."
  },
  {
    "objectID": "posts/2022-11-11-multispecies-functional-response/index.html#multiple-species",
    "href": "posts/2022-11-11-multispecies-functional-response/index.html#multiple-species",
    "title": "Fitting a multispecies functional response in Stan",
    "section": "multiple species",
    "text": "multiple species\nSuppose you have more than one species in this system. You could then rewrite Equation 1 to allow multiple animals to be included in the predation:\n\\[\nA_i = \\frac{\\alpha N_i}{1 + h\\alpha \\sum_{j = 1}^s N_j}\n\\tag{2}\\]\nhere \\(\\sum_{j = 1}^s N_j\\) means the sum over the abundances of all the prey. The subscript \\(i\\) just means that we are talking about one particular prey, which we label \\(i\\). This prey is included in the summation in the denominator.\nIt’s common to consider that different prey species might be attacked or handled at different rates (Smith and Smith 2020) (Smout et al. 2010)"
  },
  {
    "objectID": "posts/2022-10-14-growth_curve_measurement_error/index.html",
    "href": "posts/2022-10-14-growth_curve_measurement_error/index.html",
    "title": "Growth curves",
    "section": "",
    "text": "library(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nMany animals and plants grow quickly when small and more slowly as they mature. There are many popular ways of describing this relationship; one very common and convenient relationship is the Von-Bertanalaffy (VB) growth curve:\n\\[\nL_t = L_0e^{-rt} + L_\\infty(1 - e^{-rt})\n\\tag{1}\\]\nThis can also be written as\n\\[\nL_t = L_\\infty - (L_\\infty - L_0)e^{-rt}\n\\]\nThis curve has a long tradition in ecology. It can be derived from simple assumptions about how different aspects of metabolism scale with the body size of an organism. I’m not going to derive it here because I don’t want this to be a huge post!\nI like this second way of writing the equation because it highlights that the VB equation is a linear transformation of an exponential function. We start out at \\(L_0\\) and exponentially decay towards \\(L_\\infty\\)."
  },
  {
    "objectID": "posts/2022-10-14-growth_curve_measurement_error/index.html#a-single-tree",
    "href": "posts/2022-10-14-growth_curve_measurement_error/index.html#a-single-tree",
    "title": "Growth curves",
    "section": "a single tree",
    "text": "a single tree\nI’m going to do a simple simulation of one tree growing. here is code that does that\n\ntar_load(vb_one_tree)\n\nvb_one_tree |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() + \n  geom_line(aes(y = Lt)) + \n  theme_bw()\n\n\n\n\nsimulate this same data``` in targets\nfit a stan model to it! here is the Stan model: formatted?\n\n\ndata{\n  int<lower=0> n;\n  vector[n] time;\n  vector[n] Lt;\n}\nparameters{\n  real<lower=0> r;\n  real<lower=0> Lmax;\n  real<lower=0> sigma_obs;\n}\nmodel{\n  Lt ~ normal(Lmax * (1 - exp(-r*time)), sigma_obs);\n  r ~ lognormal(-3, 1);\n  Lmax ~ normal(200, 20);\n  sigma_obs ~ exponential(1);\n}\n\n\n\nvb_one_tree <- cmdstan_model(here::here(\"posts\", \"2022-10-14-growth_curve_measurement_error\",\"vb_one_tree.stan\"))\n\nsource(here::here(\"posts\", \"2022-10-14-growth_curve_measurement_error\",\"vb-growth.R\"))\n\none_tree_sim <- sim_vb_one_tree()\n\none_tree_list <- list(n = nrow(one_tree_sim),\n                      time  = one_tree_sim$time, \n                      Lt = one_tree_sim$Lt_obs)\n\none_tree_post <- vb_one_tree$sample(data = one_tree_list,\n                                    refresh = 0L,\n                                    parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.1 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 finished in 0.1 seconds.\nChain 4 finished in 0.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.1 seconds.\nTotal execution time: 0.4 seconds.\n\none_tree_post\n\n  variable   mean median   sd  mad     q5    q95 rhat ess_bulk ess_tail\n lp__      -81.50 -81.15 1.27 1.01 -83.92 -80.14 1.00     1797     2438\n r           0.03   0.03 0.00 0.00   0.03   0.03 1.00     2423     2366\n Lmax      150.70 150.69 1.14 1.13 148.88 152.63 1.00     2522     2453\n sigma_obs   4.46   4.42 0.49 0.49   3.74   5.32 1.00     2545     2499\n\n\nplot it\n\nlibrary(tidybayes)\n\nexpected_df <- one_tree_post |> \n  spread_rvars(Lmax, r) |> \n  expand_grid(time = seq(0, 200, length.out = 14)) |> \n  mutate(Lt = Lmax * (1 - exp(-r * time)))\n\nexpected_plot <- expected_df |> \n  ggplot(aes(x = time, ydist = Lt)) + \n  stat_lineribbon()\nexpected_plot\n\nWarning: Using the `size` aesthietic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\n\n\nWarning: Using the `size` aesthietic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\nGrowth curve for one tree. the line shows the expected value, with posterior uncertainty around exactly what that average should be.\n\n\n\n\nThis relationship shows the average line, the expected size of the tree. We can add the original data like this:\n\none_tree_sim |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() +\n  stat_dist_lineribbon(aes(x = time, dist = Lt),\n                  data = expected_df, inherit.aes = FALSE)\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\nAt the time of this writing the error messages here are particularly unhelpful. If you try to use stat_lineribbon rather than stat_dist_lineribbon you get the foloing misleading message:\n\none_tree_sim |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() +\n  stat_lineribbon(aes(x = time, y = Lt),\n                  data = expected_df, inherit.aes = FALSE)"
  },
  {
    "objectID": "posts/2022-10-14-growth_curve_measurement_error/index.html#adding-measurement-error",
    "href": "posts/2022-10-14-growth_curve_measurement_error/index.html#adding-measurement-error",
    "title": "Growth curves",
    "section": "adding measurement error",
    "text": "adding measurement error\nNot all trees are the same age. there are two ways for a tree to be different in size to its neighbhours: it could be a different age, or it could grow at a different rate. when we fit a growth curve to many individuals, we usually need to shift the curve to the left or right. We do this by modelling the starting size as a parameter in the model\nHere we kind of have two choices. We could subtract every trees first date of measurment from all measurements. This would start all trees off at 0. And then the likelihood for \\(L_1\\) would be:\n\\[\nL_1 \\sim \\text{N}(L_0e^{-r0} + L_\\infty(1 - e^{-r0}), \\sigma_{obs})\n\\]\nOr, we could split the likelihood into two parts: one for the first observations, and one for all subsequent ones:\n\\[\n\\begin{align}\nL_t &\\sim \\text{N}(L_oe^{-rt} + L_\\infty(1 - e^{-rt}), \\sigma_{obs}) \\\\\nL_1 &\\sim \\text{N}(L_o, \\sigma_{obs})\\\\\n\\end{align}\n\\]\nIf we don’t know the size that the tree was at the beginning\n\ncreate a new target to run tidybayes on both of these and extract them. look at the distributions of Lo.\nthink about how to work with differing growth rates across years – taylor approx?\nmake a multi-individual version where everyone has a different Lo parameter – just using indexing\nmake a multi-site version where everyone has a site offset too\ncan you do it like\n\nvector_of_plot_id – as long as numbers of trees, having values up to the max plot id vector_of_plot_ids[tree_id] – get the plot that a specific tree is in\nvector_of_plot_means[vector_of_plot_ids[tree_id]] vector_of_plot_sigmas[vector_of_plot_ids[tree_id]]\nas the two parameters for the distribution of all tree IDs\nthen to calculate the Lo for a new tree you’d use these latter mean and sigma for that plot or whatever model you ahve\nhow to add yearly variation?\nr is a year interval\nwould it be possible to find the expectation of a range of values from a gaussian process?\nwhat would be the expectation of a t draws from a normal distribution? like every year, some are up and some are down – have any of those years been observed already.\n\ntar_load(growth_curve_predict_mcmc_vb_one_tree_Lo_oneline_predictions)\ntar_load(growth_curve_predict_data)\n\ngrowth_curve_predict_mcmc_vb_one_tree_Lo_oneline_predictions |> \n  gather_rvars(Lnew[t_id]) |> \n  mutate(time = growth_curve_predict_data$timenew[t_id]) |> \n  ggplot(aes(x = time, dist = .value)) + \n  stat_dist_lineribbon()\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\nIs it as simple as: a generated quantites model which takes the new observations, models them as N(lo, sigma_obs), then computes the expectation as a generated quantity?"
  },
  {
    "objectID": "posts/2016-12-02/index.html",
    "href": "posts/2016-12-02/index.html",
    "title": "Twitter recommends stats books",
    "section": "",
    "text": "Yesterday I asked my beloved Twitter nerds to recommend to me their favourite quantitative texts in Ecology:\nAs a way of saying “Thank you!” I thought that I would put all the books in a list for anyone who is curious."
  },
  {
    "objectID": "posts/2016-12-02/index.html#what-is-this-post",
    "href": "posts/2016-12-02/index.html#what-is-this-post",
    "title": "Twitter recommends stats books",
    "section": "What is this post",
    "text": "What is this post\nThis post is meant to be a simple template for new posts – when I make a new post I’ll start by copying and pasting this current one over. Probably in the future there will be a plugin that does this for us, but until then this will be fine."
  },
  {
    "objectID": "posts/2016-12-02/index.html#why-i-switched-to-quarto",
    "href": "posts/2016-12-02/index.html#why-i-switched-to-quarto",
    "title": "Twitter recommends stats books",
    "section": "Why I switched to Quarto",
    "text": "Why I switched to Quarto\nA simple and frequent answer: overenthusiasm! I like seeing all the new things that the Rstudio team develop, and I know that this vibrant community will keep adding features and tutorials"
  },
  {
    "objectID": "posts/2016-12-02/index.html#quarto-resources",
    "href": "posts/2016-12-02/index.html#quarto-resources",
    "title": "Twitter recommends stats books",
    "section": "quarto resources",
    "text": "quarto resources\n\nthe Ultimate Guide to starting a Quarto blog\nquarto discussions\nDanielle Navarro’s comments on the topic\nNick Tierney’s notes\nand of course Nicks exciting book project!"
  },
  {
    "objectID": "posts/2016-12-02/index.html#surprise-its-targets",
    "href": "posts/2016-12-02/index.html#surprise-its-targets",
    "title": "Twitter recommends stats books",
    "section": "surprise it’s targets",
    "text": "surprise it’s targets\n\n\n\nvia GIPHY\n\nI’m also using targets. Here are some observations on that so far:\n\nLast error: ! System command 'quarto' failed I get this error message more that 10x more often than any other. As I’m learning Quarto I keep making errors which break the Quarto process but targets doesn’t (yet?) communicate the specific error message. To find out what has gone wrong, I go over to the terminal and run quarto render .\nyou have to go into _metadata.yml and stop the posts from freezing, by setting freeze: false . Targets will handle all the rest of it.\n\nI’m using targets with quarto because I want to work with large bayesian models fit with stan and brms., and fitting them in a regular blog post – including compiling, sampling etc."
  },
  {
    "objectID": "posts/2016-12-02/index.html#my-own-observations-and-questions",
    "href": "posts/2016-12-02/index.html#my-own-observations-and-questions",
    "title": "Twitter recommends stats books",
    "section": "My own observations and questions",
    "text": "My own observations and questions\nso far it is very straightforward!\n\nit seems like post folder can’t begin with dates?\nlove LOVE the bibliography automatically appearing"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html",
    "title": "The evolution of plasticity",
    "section": "",
    "text": "library(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#data-simulation",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#data-simulation",
    "title": "The evolution of plasticity",
    "section": "Data simulation",
    "text": "Data simulation\nRARE to have more than two years per female\nlet’s start with one female\n\nn <- 1\navg_csize <- 5\n\nlifespan <- 5\n\ngeneral_temp <- runif(lifespan, 2, 12)\n\ngeneral_temp_c <- general_temp - mean(general_temp)"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#fecundity",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#fecundity",
    "title": "The evolution of plasticity",
    "section": "fecundity",
    "text": "fecundity\n\\[\n\\begin{align}\n\\text{eggs} &\\sim \\text{Poisson}(e^{\\beta_0 + \\beta_1*(x - \\bar{x})})\n\\end{align}\n\\]\n\nlibrary(tidyverse)\n\neffet_temp <- .1\n\none_bird <- tibble(year = 1:lifespan,\n       general_temp,\n       general_temp_c,\n       expected_clutch = log(avg_csize) + effet_temp * general_temp_c,\n       observed_clutch = rpois(n = length(year), \n                               lambda = exp(expected_clutch)))\n\none_bird\n\n# A tibble: 5 × 5\n   year general_temp general_temp_c expected_clutch observed_clutch\n  <int>        <dbl>          <dbl>           <dbl>           <int>\n1     1         2.66          -3.58            1.25               4\n2     2         4.59          -1.65            1.44               3\n3     3         3.97          -2.27            1.38               2\n4     4        11.2            4.95            2.10              10\n5     5         8.80           2.56            1.87               4\n\n\nMake a simple model to measure\n\nsummary(glm(observed_clutch ~ general_temp_c, data = one_bird))\n\n\nCall:\nglm(formula = observed_clutch ~ general_temp_c, data = one_bird)\n\nDeviance Residuals: \n      1        2        3        4        5  \n 1.8826  -0.4527  -1.0228   1.9670  -2.3740  \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)  \n(Intercept)      4.6000     0.9764   4.711   0.0181 *\ngeneral_temp_c   0.6935     0.3034   2.286   0.1064  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 4.766794)\n\n    Null deviance: 39.2  on 4  degrees of freedom\nResidual deviance: 14.3  on 3  degrees of freedom\nAIC: 25.444\n\nNumber of Fisher Scoring iterations: 2\n\n\n\none_bird |> \n  ggplot(aes(x = general_temp, y = observed_clutch)) + \n  geom_point()"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#date-of-laying",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#date-of-laying",
    "title": "The evolution of plasticity",
    "section": "Date of laying",
    "text": "Date of laying\nWhen do birds lay eggs?\n\navg_dponte <- 138\n\neffet_temp_dponte <- -3\n\none_bird_dponte <- tibble(year = 1:lifespan,\n       general_temp,\n       general_temp_c,\n       expected_dponte = avg_dponte + effet_temp_dponte * general_temp_c,\n       observed_dponte = round(rnorm(n = length(year), \n                               mean = expected_dponte,\n                               sd = 5)))\n\n\none_bird_dponte |> \n  ggplot(aes(x = general_temp, y= observed_dponte)) + \n  geom_point()\n\n\n\nsummary(lm(observed_dponte ~ general_temp_c, data = one_bird_dponte))\n\n\nCall:\nlm(formula = observed_dponte ~ general_temp_c, data = one_bird_dponte)\n\nResiduals:\n     1      2      3      4      5 \n 3.764  1.871 -4.451  3.960 -5.143 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    139.6000     2.3038   60.60  9.9e-06 ***\ngeneral_temp_c  -2.1332     0.7159   -2.98   0.0586 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.151 on 3 degrees of freedom\nMultiple R-squared:  0.7474,    Adjusted R-squared:  0.6632 \nF-statistic: 8.878 on 1 and 3 DF,  p-value: 0.05862"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#combine-the-two",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#combine-the-two",
    "title": "The evolution of plasticity",
    "section": "combine the two",
    "text": "combine the two\nBirds which lay earlier also lay larger eggs, possibly because they are High Quality Moms.\n\n## population averages\npop_average_dponte <- 138\npop_average_csize <- 4\n\n## Effect of quality\nmom_quality <- 4\nquality_on_dponte <- 2\nquality_on_csize <- .2\n\nlet’s observe five years for the high-quality Mom:\n\nquality_effects <- tibble(\n  year = 1:lifespan,\n  mom_quality = mom_quality,\n  general_temp,\n  general_temp_c,\n  ## Effect of temperature -- does it depend on quality? let's say that it DOES (for now) \n  effet_temp_dponte_qual = -.7*mom_quality,\n  effet_temp_csize_qual = .1*log(mom_quality),\n  # csize\n  mom_avg_csize = log(pop_average_csize) +  quality_on_csize*log(mom_quality),\n  temp_avg_csize = exp(mom_avg_csize + effet_temp_csize_qual*general_temp_c),\n  # dponte\n  mom_avg_dponte = pop_average_dponte + quality_on_dponte*mom_quality,\n  temp_avg_dponte = mom_avg_dponte + effet_temp_dponte_qual*general_temp_c,\n  ## observations\n  obs_csize = rpois(n = length(year), lambda = temp_avg_csize),\n  obs_dponte = rnorm(n = length(year), mean = temp_avg_dponte, sd = 3) |> round()\n)\n\nSome of these values are unreasonable! we can adjust later\n\nquality_effects |> \n  ggplot(aes(x = general_temp, y = obs_csize)) + \n  geom_point()\n\n\n\nquality_effects |> \n  ggplot(aes(x = general_temp, y = obs_dponte)) + geom_point()"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#multiple-females",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#multiple-females",
    "title": "The evolution of plasticity",
    "section": "Multiple females",
    "text": "Multiple females\nWe can repeat this process for multiple females at once!\n\nn_females <- 42\n\nlifespan <- 5\n\ngeneral_temp <- runif(lifespan, 2, 12)\n\ngeneral_temp_c <- general_temp - mean(general_temp)\n\nmom_qualities <- runif(n_females, min = 0, max = 4)\n\nmany_moms_temperature <- expand_grid(year = 1:lifespan,\n            idF1 = 1:n_females) |> \n  mutate(mom_quality = mom_qualities[idF1],\n         general_temp = general_temp[year],\n         general_temp_c = general_temp_c[year],\n         ## adding the biology\n         ## Effect of temperature -- does it depend on quality? let's say that it DOES (for now) \n         effet_temp_dponte_qual = -.7*mom_quality,\n         effet_temp_csize_qual = .1*log(mom_quality),\n         # csize\n         mom_avg_csize = log(pop_average_csize) +  quality_on_csize*log(mom_quality),\n         temp_avg_csize = exp(mom_avg_csize + effet_temp_csize_qual*general_temp_c),\n         # dponte\n         mom_avg_dponte = pop_average_dponte + quality_on_dponte*mom_quality,\n         temp_avg_dponte = mom_avg_dponte + effet_temp_dponte_qual*general_temp_c,\n         ## observations\n         obs_csize = rpois(n = length(year), lambda = temp_avg_csize),\n         obs_dponte = rnorm(n = length(year), mean = temp_avg_dponte, sd = 3) |> round()\n  )\n\nlet’s plot it!\n\nmany_moms_temperature |> \n  ggplot(aes(x = general_temp, y = obs_dponte)) + \n  geom_point()\n\n\n\nmany_moms_temperature |> \n  ggplot(aes(x = general_temp, y = obs_dponte, group = idF1)) + \n  stat_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nmany_moms_temperature |> \n  ggplot(aes(x = general_temp, y = obs_csize)) + \n  geom_point()\n\n\n\nmany_moms_temperature |> \n  ggplot(aes(x = general_temp, y = obs_csize, group = idF1)) + \n  stat_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#model-in-brms",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#model-in-brms",
    "title": "The evolution of plasticity",
    "section": "model in brms",
    "text": "model in brms\n\nlibrary(brms)\n\nLoading required package: Rcpp\n\n\nLoading 'brms' package (version 2.18.4). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n\n\n\nAttaching package: 'brms'\n\n\nThe following objects are masked from 'package:tidybayes':\n\n    dstudent_t, pstudent_t, qstudent_t, rstudent_t\n\n\nThe following object is masked from 'package:stats':\n\n    ar\n\nglimpse(many_moms_temperature)\n\nRows: 210\nColumns: 13\n$ year                   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ idF1                   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, …\n$ mom_quality            <dbl> 3.9726637, 2.6807229, 1.4876063, 0.9450074, 0.4…\n$ general_temp           <dbl> 9.170093, 9.170093, 9.170093, 9.170093, 9.17009…\n$ general_temp_c         <dbl> 0.573273, 0.573273, 0.573273, 0.573273, 0.57327…\n$ effet_temp_dponte_qual <dbl> -2.7808646, -1.8765060, -1.0413244, -0.6615052,…\n$ effet_temp_csize_qual  <dbl> 0.137943682, 0.098608649, 0.039716829, -0.00565…\n$ mom_avg_csize          <dbl> 1.662182, 1.583512, 1.465728, 1.374982, 1.20751…\n$ temp_avg_csize         <dbl> 5.704533, 5.155383, 4.430430, 3.942201, 3.17804…\n$ mom_avg_dponte         <dbl> 145.9453, 143.3614, 140.9752, 139.8900, 138.818…\n$ temp_avg_dponte        <dbl> 144.3511, 142.2857, 140.3782, 139.5108, 138.654…\n$ obs_csize              <int> 2, 5, 5, 5, 5, 5, 6, 5, 4, 7, 7, 7, 3, 2, 4, 5,…\n$ obs_dponte             <dbl> 143, 143, 146, 135, 143, 136, 140, 139, 146, 14…\n\n## define formulae\ncsize_model_bf <- bf(obs_csize ~ 1 + general_temp_c + (1 + general_temp_c|f|idF1),\n                     family = poisson())\n\ndponte_model_bf <- bf(obs_dponte ~ 1 + general_temp_c + (1 + general_temp_c|f|idF1),\n                      family = gaussian())\n\n## set priors\n\n## run full model\nfull_model <- brm(csize_model_bf + dponte_model_bf, \n                  data = many_moms_temperature,\n                  cores = 2, chains = 2)\n\nSetting 'rescor' to FALSE by default for this model\n\n\nCompiling Stan program...\n\n\nTrying to compile a simple C file\n\n\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nclang -mmacosx-version-min=10.13 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DBOOST_NO_AUTO_PTR  -include '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/usr/local/include   -fPIC  -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -c foo.c -o foo.o\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:88:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:1: error: unknown type name 'namespace'\nnamespace Eigen {\n^\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:16: error: expected ';' after top level declarator\nnamespace Eigen {\n               ^\n               ;\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:96:10: fatal error: 'complex' file not found\n#include <complex>\n         ^~~~~~~~~\n3 errors generated.\nmake: *** [foo.o] Error 1\n\n\nStart sampling"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#fitness",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#fitness",
    "title": "The evolution of plasticity",
    "section": "fitness",
    "text": "fitness"
  },
  {
    "objectID": "posts/2022-11-23-evolution-of-plasticity/index.html#notes",
    "href": "posts/2022-11-23-evolution-of-plasticity/index.html#notes",
    "title": "The evolution of plasticity",
    "section": "notes",
    "text": "notes\nvery small sample sizes per female – experiment with this (2 years or more)\nThe data are 0-truncated: only nesting females are measured!"
  },
  {
    "objectID": "posts/2022-11-21-growth-curve-known-age/index.html",
    "href": "posts/2022-11-21-growth-curve-known-age/index.html",
    "title": "Simple nonlinear growth",
    "section": "",
    "text": "library(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nsuppressPackageStartupMessages(library(brms))"
  },
  {
    "objectID": "posts/2022-11-21-growth-curve-known-age/index.html#growth-when-you-know-the-age",
    "href": "posts/2022-11-21-growth-curve-known-age/index.html#growth-when-you-know-the-age",
    "title": "Simple nonlinear growth",
    "section": "Growth when you know the age",
    "text": "Growth when you know the age\nWe’re doing a lot of work with growth equations these days! This is how to use brms to fit the growth of an animal when we know:\n\nthe birth year\nsize at each year (measured as the length of a leg)\ntime\n\nWe’ll start with the classic VB growth equation that has been in several other posts:\n\\[\nL_t = L_0e^{-rt} + L_\\infty(1 - e^{-rt})\n\\tag{1}\\]\nThe model we use will resemble the others as well:\n\\[\n\\begin{align}\n\\text{Measurements} &\\sim \\text{Normal}(L_t, \\sigma_{meas})\\\\\nL_t &= L_0e^{-rt} + L_\\infty(1 - e^{-rt}) \\\\\nL_0 &\\sim ...\\\\\nL_\\infty &\\sim ...\\\\\nr &\\sim ...\n\\end{align}\n\\]\n\nSimulating data\nI’m starting off with a function to simulate data; this will make it easy to repeat experiments with this model.\n\nsimulate_one_growth_known_age <- function(age, r,\n                                          Lmax,\n                                          size_at_first,\n                                          sd_obs){\n  tibble(age = 0:age,\n         size = size_at_first * exp(-r * age) + Lmax * (1 - exp(-r * age)),\n         obs_size = rnorm(n = length(age), mean = size, sd = sd_obs))\n}\n\n\none_animal <- simulate_one_growth_known_age(9, Lmax = 550, size_at_first = 277, r = .7, sd_obs = 6)\n\none_animal |> \n  ggplot(aes(x = age, y = obs_size)) + \n  geom_point() + \n  theme_bw() + \n  geom_line(aes(y = size)) + \n  labs(x = \"Age\", y = \"Size\") \n\n\n\n\nGrowth curve for a single individual. The curved line is the true size, and the dots are observations around it. The observations are taken in the field while the semi-tranquilized animal is struggling, so they show some slight variation."
  },
  {
    "objectID": "posts/2022-11-21-growth-curve-known-age/index.html#nonlinear-modelling-with-brms",
    "href": "posts/2022-11-21-growth-curve-known-age/index.html#nonlinear-modelling-with-brms",
    "title": "Simple nonlinear growth",
    "section": "Nonlinear modelling with BRMS",
    "text": "Nonlinear modelling with BRMS\nThere are three steps to defining and elementary model with brms:\n\nwrite the model\nwrite down some priors\ncondition the model on data\n\nIn practice there are many more steps, including prior predictive checks to make sure our priors make sense. In this post I’m going to focus on the mechanistic how-to of fitting a nonlinear model in brms and I’ll come back to Prior Predictive checks, which I love, in another post.\nFirst we define the model, here we need to indicate what are parameters by doing a ~1 after each. Yes it is a formula with multiple little formulae inside it! Feel the power flow through you.\n\nvb_form <- bf(obs_size ~ startsize * exp(-growthrate * age) + maxsize * (1 - exp(-growthrate * age)),\n              startsize ~ 1, \n              growthrate ~ 1,\n              maxsize ~ 1,\n              nl = TRUE,\n              family = gaussian())\n\nget_prior(vb_form, data = one_animal)\n\n                 prior class      coef group resp dpar      nlpar lb ub\n student_t(3, 0, 22.5) sigma                                       0   \n                (flat)     b                           growthrate      \n                (flat)     b Intercept                 growthrate      \n                (flat)     b                              maxsize      \n                (flat)     b Intercept                    maxsize      \n                (flat)     b                            startsize      \n                (flat)     b Intercept                  startsize      \n       source\n      default\n      default\n (vectorized)\n      default\n (vectorized)\n      default\n (vectorized)\n\nvb_prior <- c(\n  prior(exponential(1), class = \"sigma\"),\n  prior(normal(0,1), nlpar = \"growthrate\", lb = 0),\n  prior(normal(550, 20), nlpar = \"maxsize\", lb = 0),\n  prior(normal(200, 50), nlpar = \"startsize\", lb = 0)\n)\n\nvb_model <- brm(formula = vb_form,\n                prior = vb_prior, \n                data = one_animal, \n                chains = 2, \n                file = here::here(\"posts/2022-11-21-growth-curve-known-age/vb_model.rds\"))\n\n\none_animal |> \n  tidybayes::add_predicted_rvars(vb_model) |> \n  ggplot(aes(x = age, dist = .prediction)) + \n  stat_dist_lineribbon() + \n  geom_point(aes(x = age, y = obs_size), inherit.aes = FALSE) \n\nWarning: Using the `size` aesthietic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\n\n\nWarning: Using the `size` aesthietic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n\n\n\n\n\n\nsummary(vb_model)\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: obs_size ~ startsize * exp(-growthrate * age) + maxsize * (1 - exp(-growthrate * age)) \n         startsize ~ 1\n         growthrate ~ 1\n         maxsize ~ 1\n   Data: one_animal (Number of observations: 10) \n  Draws: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 2000\n\nPopulation-Level Effects: \n                     Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nstartsize_Intercept    275.83      4.47   266.81   284.49 1.00     1050\ngrowthrate_Intercept     0.66      0.03     0.61     0.72 1.00      918\nmaxsize_Intercept      551.62      2.43   546.94   556.62 1.00      814\n                     Tail_ESS\nstartsize_Intercept       866\ngrowthrate_Intercept      796\nmaxsize_Intercept         765\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     4.51      0.96     3.05     6.76 1.00      899      951\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1)."
  },
  {
    "objectID": "posts/2022-10-23-probability-integral-transform/index.html",
    "href": "posts/2022-10-23-probability-integral-transform/index.html",
    "title": "Probability integral transforms",
    "section": "",
    "text": "take random numbers from a distribution\nThen run them through that distribution’s CDF\nsure enough it is uniform!"
  },
  {
    "objectID": "posts/2022-10-23-probability-integral-transform/index.html#what-happens-when-you-are-wrong",
    "href": "posts/2022-10-23-probability-integral-transform/index.html#what-happens-when-you-are-wrong",
    "title": "Probability integral transforms",
    "section": "what happens when you are wrong",
    "text": "what happens when you are wrong\nlet’s make some curves that don’t really match\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nn <- 4000\ntibble(meanval = seq(from = 1, to = 14, length.out = 6),\n       sd = 2.5) |> \n  expand_grid(x = seq(from = 0, to = 18, length.out = 30)) |>\n  mutate(normal_dist = dnorm(x, mean = meanval, sd = sd),\n         gamma_dist = dgamma(x, \n                        shape = meanval^2/sd^2,\n                        rate = meanval/sd^2)) |> \n  pivot_longer(ends_with(\"dist\"), \n               names_to = \"distribution\",\n               values_to = \"value\") |> \n  ggplot(aes(x = x, y = value, colour = distribution)) + \n  geom_line()  +\n  facet_wrap(~meanval)\n\n\n\n\nWe can see that the fit gets worse as the mean drops\nlet’s simulate data from the gamma and use the PIT assuming instead it is normal:\n\nn <- 4000\ntibble(meanval = seq(from = 1, to = 14, length.out = 6),\n       sd = 2.5) |> \n  rowwise() |>\n  mutate(normal_dist = list(rnorm(n, mean = meanval, sd = sd)),\n         gamma_dist = list(rgamma(n, \n                        shape = meanval^2/sd^2,\n                        rate = meanval/sd^2))) |> \n  pivot_longer(ends_with(\"dist\"), \n               names_to = \"distribution\",\n               values_to = \"samples\") |> \n  rowwise() |> \n  mutate(pit_samples = list(pnorm(samples, mean = meanval, sd = sd))) |> \n  select(-samples) |> \n  # filter(distribution == \"gamma_dist\") |> \n  unnest(pit_samples) |> \n  ggplot(aes(x = pit_samples)) + \n  geom_histogram() + \n  facet_grid(distribution~meanval)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nlet’s try it with just the gamma, but changing both moments and always using the normal:\n\nn <- 4000\nexpand_grid(meanval = seq(from = 1, to = 14, length.out = 6),\n       sdval = seq(from = .2, to = 7, length.out = 4)) |> \n  rowwise() |>\n  mutate(gamma_dist = list(rgamma(n, \n                        shape = meanval^2/sdval^2,\n                        rate = meanval/sdval^2))) |> \n  rowwise() |> \n  mutate(pit_samples = list(\n    pnorm(gamma_dist,\n          mean = meanval,\n          sd = sdval))) |> \n  select(-gamma_dist) |> \n  # filter(distribution == \"gamma_dist\") |> \n  unnest(pit_samples) |> \n  ggplot(aes(x = pit_samples)) + \n  geom_histogram() + \n  facet_grid(sdval~meanval)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nand with the lognormal\n\nn <- 4000\nexpand_grid(meanval = seq(from = 1, \n                          to = 14, \n                          length.out = 6),\n       sdval = seq(from = .2, \n                   to = 7, \n                   length.out = 4)) |> \n  rowwise() |>\n  mutate(\n    cf = log(sdval/meanval)^2 + 1,\n    lnorm_dist = list(rlnorm(n, \n                        meanlog = log(meanval) - .5*cf, \n                        sdlog = sqrt(cf))\n                      )\n    )|> \n  rowwise() |> \n  mutate(pit_samples = list(\n    pnorm(lnorm_dist,\n          mean = meanval,\n          sd = sdval)\n    # plnorm(lnorm_dist, \n    #        meanlog = log(meanval) - .5*cf, \n    #        sdlog = sqrt(cf))\n    )) |> \n  select(-lnorm_dist) |> \n  # filter(distribution == \"gamma_dist\") |> \n  unnest(pit_samples) |> \n  ggplot(aes(x = pit_samples)) + \n  geom_histogram() + \n  facet_grid(sdval~meanval)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/2016-12-07-population-growth-functional-programming/index.html",
    "href": "posts/2016-12-07-population-growth-functional-programming/index.html",
    "title": "Population growth with functional programming",
    "section": "",
    "text": "Today I want to tell you about an approach for functional programming in R – and then apply it to studying population growth!\nI have been studying some of the purrr functions lately. They are a useful family of functions for performing two common tasks in R: manipulating lists and altering the behaviour of functions. If you’d like a high-quality guide to this group of functions, set aside some time to work through Jenny Bryan’s excellent tutorial and Hadley Wickham’s chapter on Lists.\nI was inspired to write this post after reading This StackOverflow question by jebyrnes. He asks:\nand there is! An answerer mentioned purr::accumulate(). In this post I’m going to expand on the approach they suggest. accumulate, and its twin reduce, are examples of functionals – functions that take functions as their arguments, and manipulate their behaviour in some way. purrr::accumulate is a wrapper around to Reduce from the base package, with the argument accumulate = TRUE.\naccumulate is normally used when you want to do some cumulative function all along a vector. For example, we can reproduce the cumulative some of a vector like this (same output as cumsum(1:10))\n.x and .y here are just a handy way of writing “the first thing” and “the second thing”. Then accumulate goes down the vector 1:10, and takes the first thing (1) adds it to the second thing (2) and so on….\nHowever, this is not the only way it works! accumulate can take an initial value (.init) and can work on a dummy variable. If its starting function does nothing but modify an element, it will just keep modifying it: so instead of f(1, 2), f(f(1, 2), 3) we get f(.init), f(f(.init)) etc:\nClearly, the 0s are not involved in any calculation (the answer would be 0!). instead, you just get the starting value multiplied by 1.5 each time!\nThis already suggests an awesome biological interpretation: logistic population growth.\nOn thing I like about this is that is is to much easier to look at – it look like the common biological equation for population growth:\n\\[\nN_{t+1} = r*N_t\n\\]"
  },
  {
    "objectID": "posts/2016-12-07-population-growth-functional-programming/index.html#so-is-this-useful",
    "href": "posts/2016-12-07-population-growth-functional-programming/index.html#so-is-this-useful",
    "title": "Population growth with functional programming",
    "section": "So, is this useful?",
    "text": "So, is this useful?\nI wonder if this might be an interesting pedagogical tool. I feel like it might place the emphasis a bit differently to for-loops. Perhaps a for loop emphasizes the passage of time – how, at each time step (each i for example) certain things happen in a certain order (the Resource grows, the Predator kills some, then some predators die, etc). On the other hand, I feel like the functional programming approach emphasizes how a population (or pair of populations) is transformed. Each little function has some parameters – which are either, constant, varying, and/or influenced by something besides population size – and each little function does only one thing – transform the population between one time step and the next."
  },
  {
    "objectID": "posts/2014-11-27-continuous-fraction-functional-programming/index.html",
    "href": "posts/2014-11-27-continuous-fraction-functional-programming/index.html",
    "title": "Continuous fractions with Map and Reduce",
    "section": "",
    "text": "Over the summer, some of us here at UBC started a reading group based around Hadley Wickham’s book, Advanced R Programming. The goal was to compare our answers to the exercises and our impressions of the content.\nWe recently read my favourite chapter, Functionals, where readers are challenged to read about some algorithms in Structure and Interpretation of Computer Programs, and implement it in R.\nI wanted to share some functions I wrote to calculate these exotic things called k-term finite continued fractions, based on that challenge:"
  },
  {
    "objectID": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#continued-fractions",
    "href": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#continued-fractions",
    "title": "Continuous fractions with Map and Reduce",
    "section": "continued fractions",
    "text": "continued fractions\nContinued Fractions look like this:\n\\[\n\\frac{n_1}{d_1 + \\frac{n_2}{d_2 + \\frac{n_3}{d_3 + \\cdots } } }\n\\]\nand have an infinite number of \\(n\\) and \\(d\\) values. However, if after \\(k\\) values you just replace the remaining ones (the \\(...\\) above) with 0, then you get a k-term finite continued fraction, which is maybe close enough:\n\\[\n\\frac{n_1}{d_1  + \\frac{n_2}{\\ddots + \\frac{n_k}{d_k}}}\n\\]\nContinued fractions have the values of \\(n\\) and \\(d\\) defined by a series. We need a function that will take the series for the numerator and denominator, calculate \\(k\\) terms, and put them together into a continued fraction.\nSo, how do we calculate this in R? Well, it turns out we can apply two concepts we learned from Wickham’s book to do so: closures and functionals.\n\nCreating a series of closures\nWe could say that each “part” of the continued fraction was a unit that looks like\n\\[\n\\frac{n}{d + x}\n\\]\nwhere \\(n\\) and \\(d\\) are a “pair” of numerator and denominator, and \\(x\\) is the next “part”, and so on. (there are probably mathematical terms for these, but I’m an ecologist, not a mathematician!). If you “build” the continued fraction from the inside out, you’d start with \\(x = 0\\), and calculate \\(\\frac{n_k}{d_k}\\). Then you move on to \\(n_{k-1}\\); for this fraction you have the numerator-denominator pair, plus the term (\\(x\\)) which you just calculated.\nWe can use closures to calculate each of these “parts” in turn, in order to keep the numerator-denominator pairs together. Closures are functions which are created by other functions; they “enclose” the environment in which they were created (hence the name), which means they can use variables from that environment (in our case, the values of a numerator & denominator)\nFirst, we make a “function factory”, a function which creates other functions (closures which retain different values of \\(n\\) and \\(d\\)):\n\nfrac_maker <- function(n, d){\n  force(n)\n  force(d)\n  function(x) n / (d + x)\n  }\n\nThis function takes a pair of numbers and defines a new function which uses them. But how can we create lots of closures, one for every numerator-denominator “pair” between 1 and \\(k\\)? We can use the function Map to run this function on each variable pair. Map works like a zipper, combining the first elements of two (or more) vectors with a function, then the second, etc. For example, the reciprocal of the Golden Ratio is the result of a continued fraction where \\(n\\) and \\(d\\) are both 1:\n\n  Ns <- rep(1, 20)\n  Ds <- rep(1, 20)\n  funs <- Map(frac_maker, Ns, Ds)\n\nfuns is now a list of functions, each one remembering its own particular value of \\(n\\) or \\(d\\). Now all we need to do is put them together and run them all. For that, we need another functional: Reduce."
  },
  {
    "objectID": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#using-reduce",
    "href": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#using-reduce",
    "title": "Continuous fractions with Map and Reduce",
    "section": "using Reduce",
    "text": "using Reduce\nReduce is just lovely. It takes a vector and “reduces” it to a single number by applying a function: the first two arguments are the first and second vector elements, then the result of that calculation and the third element, then that result and the fourth element:\nReduce(sum, c(1, 2, 3, 4)) = sum(sum(sum(1, 2), 3), 4)\nHere we have a list of functions, not values, so we use Reduce to run a function that simply executes its second argument on its first:\n\nanswer <- Reduce(function(f1,f2) f2(f1), x = funs, init = 0)\n## take reciprocal to get the Golden Ratio:\n1/answer\n\n[1] 1.618034\n\n\nWe start with the value of 0, because as we said the approximation of the continuous fraction simply replaces all the the “parts” after \\(k\\) with 0. So our function runs the first function on 0, the second function on that result, the third function on that result, etc. The result is the whole approximation of a continuous fraction, “built” from the inside out."
  },
  {
    "objectID": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#combine-into-a-function",
    "href": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#combine-into-a-function",
    "title": "Continuous fractions with Map and Reduce",
    "section": "combine into a function",
    "text": "combine into a function\nSo now we combine this to form a single function that calculates the value of a continuous series for \\(k\\) terms:\n\ncontinuous_frac <- function(Ns, Ds, frac_fun = frac_maker){\n  Ns <- rev(Ns)\n  Ds <- rev(Ds)\n  funs <- Map(frac_fun, Ns, Ds)\n  Reduce(function(f1,f2) f2(f1), x = funs, init = 0)\n  }\n\nNote that we have to reverse the series Ns and Ds, simply because the series are usually defined from \\(n_1\\) to \\(n_k\\), but we are building our function from \\(n_k\\) backwards."
  },
  {
    "objectID": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#calculating-numbers",
    "href": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#calculating-numbers",
    "title": "Continuous fractions with Map and Reduce",
    "section": "calculating numbers",
    "text": "calculating numbers\nWith this function in hand, we can approximate any continued fraction. Here are a few examples:\n\nThe value of \\(e\\) (for biological content)\nAre you wondering what all this has to do with biology? Well, Euler’s number certainly appears in plenty of biological models, so let’s calculate it:\n\ndenominator <- function(k){\n  nums <- lapply(seq_len(k)*2, function(x) c(1, 1, x))\n  out <- do.call(c, nums)\n  out[-1]\n}\n\n2 + continuous_frac(Ds = denominator(20), Ns = rep(1, 3 * 20 -1))\n\n[1] 2.718282"
  },
  {
    "objectID": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#calculating-pi",
    "href": "posts/2014-11-27-continuous-fraction-functional-programming/index.html#calculating-pi",
    "title": "Continuous fractions with Map and Reduce",
    "section": "calculating pi",
    "text": "calculating pi\nThere are several ways to calculate \\(\\pi\\), based on different forms of this equation. Apparently they converge at different rates. here are some examples:\n\nleibniz <- function(k){\n  seqs <- seq(from = 1, by = 2, length.out = k -1)\n  N <- c(4, seqs ^ 2)\n  D <- c(1, rep(2, k-1))\n  continuous_frac(N, D)\n}\n\nsomayaji <- function(k){\n  N <- seq(from = 1, by = 2, length.out = k) ^ 2\n  D <- rep(6, k)\n  3 + continuous_frac(N, D)\n}\n\nlinear <- function(k){\n  N <- seq(from = 1, by = 1, length.out = k -1) ^ 2\n  N <- c(4, N)\n  D <- seq(from = 1, by = 2, length.out = k)\n  continuous_frac(N, D)\n}\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\ndata.frame(ks = seq(2, 100, by = 5)) %>%\n  rowwise %>%\n  mutate(leibniz = leibniz(ks),\n         somayaji = somayaji(ks),\n         linear = linear(ks)) %>%\n  gather(method, pi_value, -ks) %>%\n  ggplot(aes(x = ks, y = pi_value, colour = method)) + geom_point() + geom_path() + theme_bw()\n\n\n\n\nIf we zoom in we can see that the third form outperforms Somayaji’s:\n\ndata.frame(ks = seq(5, 10, by = 1)) %>%\n  rowwise %>%\n  mutate(somayaji = somayaji(ks),\n         linear = linear(ks)) %>%\n  gather(method, pi_value, -ks) %>%\n  ggplot(aes(x = ks, y = pi_value, colour = method)) + geom_point() + geom_path() + xlab(\"k\") + ylab(expression(pi)) + theme_bw()"
  },
  {
    "objectID": "posts/9999-template/index.html",
    "href": "posts/9999-template/index.html",
    "title": "Andrew tries Quarto",
    "section": "",
    "text": "library(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)"
  },
  {
    "objectID": "posts/9999-template/index.html#what-is-this-post",
    "href": "posts/9999-template/index.html#what-is-this-post",
    "title": "Andrew tries Quarto",
    "section": "What is this post",
    "text": "What is this post\nThis post is meant to be a simple template for new posts – when I make a new post I’ll start by copying and pasting this current one over. Probably in the future there will be a plugin that does this for us, but until then this will be fine."
  },
  {
    "objectID": "posts/9999-template/index.html#why-i-switched-to-quarto",
    "href": "posts/9999-template/index.html#why-i-switched-to-quarto",
    "title": "Andrew tries Quarto",
    "section": "Why I switched to Quarto",
    "text": "Why I switched to Quarto\nA simple and frequent answer: overenthusiasm! I like seeing all the new things that the Rstudio team develop, and I know that this vibrant community will keep adding features and tutorials"
  },
  {
    "objectID": "posts/9999-template/index.html#quarto-resources",
    "href": "posts/9999-template/index.html#quarto-resources",
    "title": "Andrew tries Quarto",
    "section": "quarto resources",
    "text": "quarto resources\n\nthe Ultimate Guide to starting a Quarto blog\nquarto discussions\nDanielle Navarro’s comments on the topic\nNick Tierney’s notes\nand of course Nicks exciting book project!"
  },
  {
    "objectID": "posts/9999-template/index.html#surprise-its-targets",
    "href": "posts/9999-template/index.html#surprise-its-targets",
    "title": "Andrew tries Quarto",
    "section": "surprise it’s targets",
    "text": "surprise it’s targets\n\n\n\nvia GIPHY\n\nI’m also using targets. Here are some observations on that so far:\n\nLast error: ! System command 'quarto' failed I get this error message more that 10x more often than any other. As I’m learning Quarto I keep making errors which break the Quarto process but targets doesn’t (yet?) communicate the specific error message. To find out what has gone wrong, I go over to the terminal and run quarto render .\nyou have to go into _metadata.yml and stop the posts from freezing, by setting freeze: false . Targets will handle all the rest of it.\n\nI’m using targets with quarto because I want to work with large bayesian models fit with stan and brms., and fitting them in a regular blog post – including compiling, sampling etc."
  },
  {
    "objectID": "posts/9999-template/index.html#my-own-observations-and-questions",
    "href": "posts/9999-template/index.html#my-own-observations-and-questions",
    "title": "Andrew tries Quarto",
    "section": "My own observations and questions",
    "text": "My own observations and questions\nso far it is very straightforward!\n\n~it seems like post folder cant begin with dates?~ you can start a folder with a date, and I do, so that the posts sort in at least approximately the right temporal sequence. However the date for a post comes from the YAML, not the folder name.\nlove LOVE the bibliography automatically appearing\nDO think about changing the working directory for chunk evaluations to the project root, as described here. This is really important because that is the directory that targets uses when sourcing files. For example tar_load(my_target_name) will load in an object from your pipeline. But run this same line from an .qmd file in a subfolder (say posts/yourpostname/index.qmd), then THAT will be the location the computer looks in.."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrew MacDonald, PhD",
    "section": "",
    "text": "I love insects, statistics, but most of all I like solving interesting problems in a collaborative environment\nI am currently a Research Associate at the Université de Sherbrooke. My goal is to improve our ability to make predictions for ecological systems, and to build a community of practice around statistical methods in ecology."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Andrew MacDonald, PhD",
    "section": "Education",
    "text": "Education\n\nPhD, University of British Columbia, 2017\nMSc, University of Toronto, 2009\nBSc, Cape Breton University, 2006"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "The Study of the Household",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUdeS\n\n\nstan\n\n\nbrms\n\n\n\n\nHow to measure plasticity with a bayesian hierarchical model\n\n\n\n\n\n\nNov 23, 2022\n\n\nAndrew MacDonald and Audrey Tremblay\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUdeS\n\n\nstan\n\n\n\n\nHow to model the growth of an individual of known age.\n\n\n\n\n\n\nNov 21, 2022\n\n\nAndrew MacDonald\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUdeS\n\n\nstan\n\n\n\n\n\n\n\n\n\n\n\nNov 11, 2022\n\n\nAndrew MacDonald & Ben Mercier\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUdeS\n\n\nstan\n\n\n\n\nBecause sometimes: you have to\n\n\n\n\n\n\nNov 11, 2022\n\n\nAndrew MacDonald\n\n\n0 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUdeS\n\n\nstan\n\n\n\n\nQuick notes on how to make a blog with Quarto and also targets.\n\n\n\n\n\n\nNov 11, 2022\n\n\nAndrew MacDonald\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\nAndrew\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstan\n\n\nsimulation\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nAndrew\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2016\n\n\nAndrew MacDonald\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbooks\n\n\nstatistics\n\n\ntwitter\n\n\n\n\nWhat are my brilliant friends reading?\n\n\n\n\n\n\nDec 2, 2016\n\n\nAndrew MacDonald\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nSep 27, 2014\n\n\nAndrew MacDonald\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  }
]