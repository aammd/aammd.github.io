{
  "hash": "38c6c30eec61acf461132dbca1c66302",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modelling discrete growth\"\nauthor: \"Andrew MacDonald, Kelly Forester\"\ndescription: |\n  How to model the growth of things in a sensible fashion\ndate: 7 Nov 2023\neditor: source\ncategories: [UdeS, stan]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\n##  growing things get bigger\n\nAnimals get bigger over time, and young change in size faster than more mature individuals. \nThe classic Von Bertanaffy growth equation has animals growing from a starting size to a final asymptotic size:\n\n$$\nL_t = L_0e^{-rt} + L_{max}(1 - e^{-rt})\n$$\n\n* $L_0$ is the starting size\n* $L_{max}$ is the final size\n* $r$ is a growth rate\n\nThis equation yields a simple result:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL0 <- 13\nLmax <- 120\nr <- .3\ncurve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)), xlim = c(0, 20))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis is the equation in continuous time\n\nHowever we often measure animals at discreet moments in time, having as a reference their last measurement. We can use a discrete version of this equation in these cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvb_disc <- function(L_tm1, r, time, Lmax) {\n  L_tm1 * exp(-r*time) + Lmax*(1 - exp(-r * time))\n}\n\ntimevec <- rep(1, times = 13)\nsize <- numeric(length(timevec)+1)\nsize[1] <- 13\n\nfor (t in 1:length(timevec)){\n  size[t+1] = vb_disc(size[t],\n                      r = r,\n                      time = timevec[t],\n                      Lmax = Lmax)\n}\n\ncurve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)),\n      xlim = c(0, 20))\npoints(cumsum(c(0,timevec)), size)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThis works even if the points we measure at are not regular:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimevec <- runif(n = 13, min = .7, max = 3)\nsize <- numeric(length(timevec)+1)\nsize[1] <- 13\n\nfor (t in 1:length(timevec)){\n  size[t+1] = vb_disc(size[t],\n                      r = r,\n                      time = timevec[t],\n                      Lmax = Lmax)\n}\n\ncurve(L0 * exp(-r*x) + Lmax*(1 - exp(-r * x)),\n      xlim = c(0, 20))\npoints(cumsum(c(0,timevec)), size)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nSo we can see that this is the same equation. Let's simulate observations of a growing animal with measurement error\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL0 <- 13\nLmax <- 120\nr <- .3\nsigma = 2\n\ngrow_data <- tibble(time = seq(from = .5, to = 21, length.out = 40),\n       size = L0 * exp(-r* time) + Lmax*(1 - exp(-r * time)),\n       size_obs = rnorm(n = length(size), mean = size, sd = sigma))\n\ngrow_data |> \n  ggplot(aes(x = time, y = size_obs)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis is cmdstanr version 0.5.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CmdStan version: 2.31.0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n```\n\n\n:::\n\n```{.r .cell-code}\nvb_discrete <- cmdstan_model(\n  here::here(\n    \"posts/2023-10-23-discrete-vb-brms-stan/vb_discrete_meas.stan\"),\n  pedantic = TRUE)\n\nvb_discrete \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.stan}\ndata {\n  int<lower=0> n;\n  real age_first_meas;\n  vector[n-1] time_diff;\n  vector[n] obs_size;\n  int<lower=0> n_pred;\n  vector[n_pred-1] diff_pred;\n}\nparameters {\n  real<lower=0> Lstart;\n  real<lower=0> Lmax;\n  real<lower=0> r;\n  real<lower=0> sigma;\n}\nmodel {\n  Lstart ~ normal(10, 2);\n  Lmax ~ normal(120, 10);\n  r ~ exponential(1);\n  sigma ~ exponential(1);\n\n  // could add measurment error to age\n  obs_size[1] ~ normal(Lstart * exp(-r*age_first_meas) + Lmax*(1 - exp(-r * age_first_meas)), sigma);\n  obs_size[2:n] ~ normal(obs_size[1:(n-1)] .* exp(-r*time_diff) + Lmax*(1 - exp(-r*time_diff)), sigma);\n}\ngenerated quantities {\n  vector[n_pred] mu;\n  vector[n_pred] obs;\n  mu[1] = Lstart;\n\n  for (i in 2:n_pred){\n    mu[i] = mu[i-1] .* exp(-r*diff_pred[i-1]) + Lmax*(1 - exp(-r*diff_pred[i-1]));\n  }\n\n  for( j in 1:n_pred){\n    obs[j] = normal_rng(mu[j], sigma);\n  }\n\n}\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_obs <- grow_data |> \n  mutate(sampled = sample(sample(0:1, length(time), replace = TRUE, prob = c(.4, .6)))) |> \n  filter(sampled > 0) |> \n  # lagged time\n  mutate(time_diff = time - lag(time))\n\nfirst <- some_obs |> head(1)\nrest <- some_obs |> slice(-1)\n\ndiff_pred <- c(rep(2, times = 5), rep(5, 3))\n\nvb_discrete_post <- vb_discrete$sample(data = list(\n  n = nrow(some_obs),\n  time_diff = rest$time_diff,\n  age_first_meas = first$time,\n  obs_size = some_obs$size_obs,\n  n_pred = length(diff_pred) + 1,\n  diff_pred = diff_pred\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 1 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.2 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.1 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 3 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 3 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.3 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 4 Exception: normal_lpdf: Location parameter is nan, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpzcvhfH/model-16ab499914d0.stan', line 22, column 2 to column 101)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChain 4 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 1.3 seconds.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvb_discrete_post$draws() |> \n  gather_rvars(mu[i]) |> \n  mutate(time = cumsum(c(0, diff_pred))) |> \n  ggplot(aes(x = time, dist = .value)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\") +\n  geom_point(aes(x = time, y = size_obs), \n             inherit.aes = FALSE, data = grow_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `linewidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvb_discrete_post$summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 23 × 10\n   variable    mean  median     sd    mad      q5     q95  rhat ess_bulk\n   <chr>      <num>   <num>  <num>  <num>   <num>   <num> <num>    <num>\n 1 lp__     -45.0   -44.7   1.49   1.28   -47.9   -43.3    1.00    1746.\n 2 Lstart     9.88    9.88  1.69   1.74     7.07   12.6    1.00    3701.\n 3 Lmax     120.    120.    2.56   2.53   116.    124.     1.00    3457.\n 4 r          0.327   0.327 0.0322 0.0313   0.276   0.382  1.00    3343.\n 5 sigma      2.41    2.38  0.310  0.288    1.96    2.97   1.00    3267.\n 6 mu[1]      9.88    9.88  1.69   1.74     7.07   12.6    1.00    3701.\n 7 mu[2]     62.5    62.5   3.13   3.09    57.3    67.5    1.00    4241.\n 8 mu[3]     89.7    89.8   3.25   3.15    84.2    94.9    1.00    4470.\n 9 mu[4]    104.    104.    2.66   2.50    99.4   108.     1.00    5013.\n10 mu[5]    111.    111.    2.24   2.17   108.    115.     1.00    5226.\n# ℹ 13 more rows\n# ℹ 1 more variable: ess_tail <num>\n```\n\n\n:::\n:::\n\n\n## can it be written in BRMS?\n\nI want to ask, what happens if we fit a similar model in brms? I'm using a lagged column of size.\n\nThis feels like a different model, but at least in this simple example, the posterior is close to the real value. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## add a lagged growth measurement\nlagged_obs <- some_obs |> \n  mutate(sizelast = lag(size_obs)) |> \n  # drop first row\n  slice(-1)\n\nlibrary(brms)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Rcpp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading 'brms' package (version 2.19.0). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'brms'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:tidybayes':\n\n    dstudent_t, pstudent_t, qstudent_t, rstudent_t\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    ar\n```\n\n\n:::\n\n```{.r .cell-code}\nvb_formula <- bf(size_obs ~ sizelast * exp(- exp(logR) * time_diff) + \n                   sizeMax * (1 - exp(-exp(logR) * time_diff)),\n                 logR ~ 1,\n                 sizeMax ~ 1, nl = TRUE)\n\n\nget_prior(vb_formula, data = lagged_obs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                prior class      coef group resp dpar   nlpar lb ub\n student_t(3, 0, 8.6) sigma                                    0   \n               (flat)     b                              logR      \n               (flat)     b Intercept                    logR      \n               (flat)     b                           sizeMax      \n               (flat)     b Intercept                 sizeMax      \n       source\n      default\n      default\n (vectorized)\n      default\n (vectorized)\n```\n\n\n:::\n\n```{.r .cell-code}\nvb_prior <- c(\n  prior(normal(120, 10), nlpar = \"sizeMax\", class = \"b\"),\n  prior(normal(0, 1), nlpar = \"logR\", class = \"b\"),\n  prior(exponential(1), class = \"sigma\")\n)\n\n\nvb_post <- brm(vb_formula, \n               data = lagged_obs,\n               prior = vb_prior,\n               file = here::here(\"posts/2023-10-23-discrete-vb-brms-stan/vb_brms.rds\"), refresh = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(vb_post)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: size_obs ~ sizelast * exp(-exp(logR) * time_diff) + sizeMax * (1 - exp(-exp(logR) * time_diff)) \n         logR ~ 1\n         sizeMax ~ 1\n   Data: lagged_obs (Number of observations: 28) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nlogR_Intercept       -1.12      0.13    -1.41    -0.87 1.00     2561     2247\nsizeMax_Intercept   119.29      3.19   113.38   126.18 1.00     2492     1794\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     3.05      0.40     2.40     3.94 1.00     2809     2233\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n\n```{.r .cell-code}\nrv <- c(\"b_logR_Intercept\" = \"r\", \n        \"b_sizeMax_Intercept\" = \"sizeMax\")\n\n\nvb_post |> \n  gather_rvars(b_logR_Intercept, b_sizeMax_Intercept) |> \n  mutate(.value = if_else(.variable == \"b_logR_Intercept\", exp(.value), .value),\n         parname = rv[.variable]) |> \n  ggplot(aes(x = parname, dist = .value)) + stat_pointinterval() + \n  facet_wrap(~parname, scales = \"free\") + \n  geom_point(aes(x = parname, y = value), \n             inherit.aes = FALSE,\n             data = tribble(\n               ~parname, ~value,\n               \"r\"      , r,\n               \"sizeMax\", Lmax\n             ), col = \"red\", size = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nHm! interestingly, it seems to work just fine.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}