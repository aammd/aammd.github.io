{
  "hash": "83bd83fdf9e5b31d8caee2cca181f726",
  "result": {
    "markdown": "---\ntitle: \"Fitting a multispecies functional response in Stan\"\nauthor: \"Andrew MacDonald & Ben Mercier\"\ndescription: |\n  How many things get eaten, if more than one animal gets eaten?\ndate: 11 Nov 2022\ncategories: [UdeS, stan]\nbibliography: references.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nlibrary(cmdstanr)\nlibrary(stantargets)\n```\n:::\n\n\n## The equation\n\nPredators eat prey. They eat prey faster when there is more prey -- though they do have to slow down to catch, kill, and chew.[^1]\n\n[^1]: Things that eat plants have to do the same; replace \"kill\" with \"peel\" etc.\n\nIf a predator can eat multiple things, then they might end up eating less of any one prey because they spread their kills around among all their prey. In the very simplest case, they do this in proportion to how frequent the different prey are -- the predator has no preference, it just goes around randomly and eats what it finds\n\nThe classic OG version of this model comes from @holling1966\n\n$$\nA = \\frac{\\alpha N}{1 + h\\alpha N}\n$$ {#eq-type2}\n\nwhere\n\n-   N is the number of prey\n-   $\\alpha$ is the attack rate\n-   $h$ is the handling time\n\nAnd altogether you get the number of attacks $A$ on prey in some unit of time.\n\n## multiple species\n\nSuppose you have more than one species in this system. You could then rewrite @eq-type2 to allow multiple animals to be included in the predation:\n\n$$\nA_i = \\frac{\\alpha N_i}{1 + h\\alpha \\sum_{j = 1}^s N_j}\n$$ {#eq-mstype2}\n\nhere $\\sum_{j = 1}^s N_j$ means the sum over the abundances of all the prey. The subscript $i$ just means that we are talking about one particular prey, which we label $i$. This prey is included in the summation in the denominator.\n\nIt's common to consider that different prey species might be attacked or handled at different rates [@smith2020] [@smout2010a]\n\n## One species model\n\nLet's begin with the classic model and add complexity later.  \nI think it helps to think of predation as a binomial trial: out of so many prey individuals ($N$), some of them get attacked ($A$).\n\n$$\n\\begin{align}\nA &\\sim \\text{Binomial}(p, N) \\\\\np &= \\frac{\\alpha}{1 + h\\alpha N} \\\\\n\\alpha &\\sim \\text{Beta}(2, 4) \\\\\nh &\\sim \\text{LogNormal}(0,1)\n\\end{align}\n$$\nsome things to note:\n\n* the $N$ now appears in the Binomial distribution as a separate parameter, not in the expression for the probability of attack.\nRemember that the mean of a Binomial is $pN$, so in this case we will come back to @eq-type2\n\n* both the parameters have constraints: $a$ cannot be outside of $[0,1]$, and $h$ cannot be negative. We choose priors that respect these constraints!\n\nLet's translate this into Stan and take a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimple_type2 <- cmdstan_model(here::here(\"posts\", \n                                         \"2022-11-11-multispecies-functional-response\",\n                                         \"simple_type2.stan\"))\n\nsimple_type2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\n// simple predator-prey functional response for a binomial density\ndata {\n  int<lower=0> N;\n  array[N] int<lower=0> attacks;\n  array[N] int<lower=0> densities;\n}\nparameters {\n  real<lower=0,upper=1> a;\n  real<lower=0> h;\n}\ntransformed parameters{\n  vector<lower=0, upper = 1>[N] prob_attack;\n  prob_attack = a * inv(1 + a * h * to_vector(densities));\n}\nmodel {\n  a ~ beta(2,6);\n  h ~ lognormal(0, 1);\n  attacks ~ binomial(densities, prob_attack);\n}\n```\n:::\n:::\n\n\nthe code above is mostly a direct translation of the equations. \nOne technique is worth noting: the types of the input vectors. \nBinomial distributions deal in integers, and so we define `densities` and `attacks` as integers.\nHowever, in order to vectorize our calculations, we massage the input data from an array of integers to a vector of real numbers using `to_vector`. \nThis highlights an important difference between R and Stan.\nStan requires careful definition of the types of data, where R is much more informal. \n\n## simulate from a model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_one_spp_type_2 <- function(){\n  true_a <- stats::rbeta(n = 1, 8, 4)\n  true_h <- stats::rlnorm(n = 1, -2, .5)\n  densities <- seq(from = 5, to = 100, by =5)\n  prob <- true_a/(1 + true_a * true_h * densities)\n  attacks <- rbinom(n = length(densities), size = densities, prob = prob)\n  list(true_a = true_a,\n       true_h = true_h,\n       densities = densities,\n       attacks = attacks, \n       prob = prob)\n}\n\none_spp_sim <- generate_one_spp_type_2()\n\none_spp_sim\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$true_a\n[1] 0.7568304\n\n$true_h\n[1] 0.1605559\n\n$densities\n [1]   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95\n[20] 100\n\n$attacks\n [1] 2 3 4 5 7 6 3 6 3 7 6 4 5 2 8 6 4 5 5 6\n\n$prob\n [1] 0.47079213 0.34166316 0.26812246 0.22063275 0.18743446 0.16292010\n [7] 0.14407649 0.12913995 0.11700947 0.10696221 0.09850396 0.09128539\n[13] 0.08505256 0.07961647 0.07483352 0.07059268 0.06680672 0.06340618\n[19] 0.06033505 0.05754769\n```\n:::\n\n```{.r .cell-code}\nwith(one_spp_sim, rbinom(n = length(densities), size = densities, prob = prob))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 5 3 3 8 3 5 5 4 8 7 7 5 3 7 2 5 7 3 6\n```\n:::\n\n```{.r .cell-code}\nwith(one_spp_sim, plot(densities, prob*densities))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nwith(one_spp_sim, plot(densities, attacks))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\ntry it in targets:\n\n\n\n\n::: {.cell tar_globals='true' tar_interactive='false'}\n\n```{.r .cell-code}\n\ntar_option_set(packages = c(\"cmdstanr\",\n               \"ggplot2\", \"tidybayes\", \n               \"stantargets\"))\n\ngenerate_one_spp_type_too <- function(){\n  true_a <- stats::rbeta(n = 1, 8, 4)\n  true_h <- stats::rlnorm(n = 1, -2, .5)\n  densities <- seq(from = 5, to = 100, by =5)\n  prob <- true_a/(1 + true_a * true_h * densities)\n  attacks <- rbinom(n = length(densities), size = densities, prob = prob)\n  list(\n    N = length(attacks),\n    true_a = true_a,\n    true_h = true_h,\n    densities = densities,\n    attacks = attacks, \n    prob = prob\n    )\n}\n\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nEstablish _targets.R and _targets_r/globals/some-globals.R.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  stantargets::tar_stan_mcmc(name = one_spp, \n                stan_files = \"simple_type2.stan\",\n                data = generate_one_spp_type_too(),\n                stdout = R.utils::nullfile(),\n                stderr = R.utils::nullfile()\n  )\n)\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nEstablish _targets.R and _targets_r/targets/run_one_model.R.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-6eec3939e62a645d29b4\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6eec3939e62a645d29b4\">{\"x\":{\"nodes\":{\"name\":[\"one_spp_data\",\"one_spp_diagnostics_simple_type2\",\"one_spp_draws_simple_type2\",\"one_spp_file_simple_type2\",\"one_spp_mcmc_simple_type2\",\"one_spp_summary_simple_type2\",\"generate_one_spp_type_too\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"function\"],\"status\":[\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\"],\"seconds\":[0.63,0.02,0,0.01,3.69,0.58,null],\"bytes\":[316,86599,747708,470,716922,3018,null],\"branches\":[null,null,null,null,null,null,null],\"label\":[\"one_spp_data\",\"one_spp_diagnostics_simple_type2\",\"one_spp_draws_simple_type2\",\"one_spp_file_simple_type2\",\"one_spp_mcmc_simple_type2\",\"one_spp_summary_simple_type2\",\"generate_one_spp_type_too\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\"],\"id\":[\"one_spp_data\",\"one_spp_diagnostics_simple_type2\",\"one_spp_draws_simple_type2\",\"one_spp_file_simple_type2\",\"one_spp_mcmc_simple_type2\",\"one_spp_summary_simple_type2\",\"generate_one_spp_type_too\"],\"level\":[2,4,4,1,3,4,1],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"triangle\"]},\"edges\":{\"from\":[\"one_spp_mcmc_simple_type2\",\"one_spp_data\",\"one_spp_mcmc_simple_type2\",\"one_spp_data\",\"one_spp_file_simple_type2\",\"generate_one_spp_type_too\",\"one_spp_mcmc_simple_type2\"],\"to\":[\"one_spp_diagnostics_simple_type2\",\"one_spp_summary_simple_type2\",\"one_spp_summary_simple_type2\",\"one_spp_mcmc_simple_type2\",\"one_spp_mcmc_simple_type2\",\"one_spp_data\",\"one_spp_draws_simple_type2\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Stem\",\"Function\"],\"color\":[\"#354823\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"triangle\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✔ skip target one_spp_data\n✔ skip target one_spp_file_simple_type2\n✔ skip target one_spp_mcmc_simple_type2\n✔ skip target one_spp_diagnostics_simple_type2\n✔ skip target one_spp_summary_simple_type2\n✔ skip target one_spp_draws_simple_type2\n✔ skip pipeline [0.17 seconds]\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\r\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}