{
  "hash": "f5428049a9eba2fe5ce18757a1384ffa",
  "result": {
    "markdown": "---\ntitle: \"Guessing the age of Kangaroos\"\nauthor: \"Andrew MacDonald\"\ndescription: |\n  Using a growth curve to guess at individual age\ndate: 11 Nov 2022\neditor: source\ncategories: [UdeS, stan]\ndraft: true\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\nSimulating roos of known age! \nThey have some variation in their growth rates\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## same max size\n## no environmental variation\n## differences in growth rate\n\nvb_growth <- function(time, r, Lmax){\n  Lmax * (1 - exp(-r*time))\n}\n\ncurve(vb_growth(x, 0.3, 50), xlim = c(0, 13))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\nroos with different growth rates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroo_gr <- runif(34, 0.2, 0.4)\n\nexpand_grid(\n  roo_id = 1:34,\n  age = 0:12\n  ) |> \n  mutate(roo_gr = roo_gr[roo_id],\n         leg =vb_growth(time = age, r = roo_gr, Lmax = 50)) |> \n  ggplot(aes(x = age, y = leg, group = roo_id))+ \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nImagine this same process but tracking multiple cohorts at once, all still living to exactly 12 years old\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## number of cohorts\nn_cohorts <- 14\n\n## roos per year\nroos_per_year <- 25\n\n## total roos\nn_roos <- n_cohorts * roos_per_year\n\nroo_gr <- rep(.31, times = n_roos) #runif(n_roos, 0.2, 0.4)\n\ncohort_grow <- tibble(\n  roo_id = 1:n_roos,\n  cohort_id = rep(1:n_cohorts, each = roos_per_year)\n  ) |> \n  expand_grid(age = 0:12) |> \n  mutate(roo_gr = roo_gr[roo_id],\n         leg =vb_growth(time = age, r = roo_gr, Lmax = 50),\n         year = 2000 + cohort_id + age) \n\ncohort_grow |> #View()\n  ggplot(aes(x = year, y = leg, group = roo_id)) + geom_line(alpha = .3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nsampling and \"forgetting\" some of them. Not counting babies, young of the year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroos_2010 <- cohort_grow |> \n  filter(year == 2010)#, \n         # leg > 0)\n\nroos_2010 |> \n  ggplot(aes(x = leg)) + \n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThese are all the roos AVAILABLE to be caught in 2010\n\nWe only get to catch 80% of them\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroos_2010$roo_id |> n_distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 250\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## only catch 80%, every year, independent of whether or not they have ever been caught before\nroos_tagged <- cohort_grow |> \n  mutate(is_caught = rbinom(length(roo_id), prob = .7, size = 1)) |> \n  # filter for a year when there were roos of every size in this example\n  filter(year >=2009, \n         year < 2014)\n\nroos_tagged |> \n  ggplot(aes(x = year, y = leg, group = roo_id)) +# geom_line(alpha = .3) +\n  geom_point(aes(colour = is_caught), position = position_jitter(width = .1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis is a simple simulation of how the data look in the real world.\n\nShould the smallest roos have a nonzero value for the length? \n\nWe only observe roos if they are caught!\n\nRoos 2 yo or younger are identified with age \nroos older than that are NOT\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroos_observed <- roos_tagged |> \n  filter(is_caught == 1) |> \n  mutate(leg_meas = rnorm(length(leg), mean = leg, sd = .5)) |> \n  group_by(roo_id) |>\n  mutate(age_at_capture = if_else(min(age)<3, min(age), false = NA),\n         time_since_capture = year - min(year))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## \nroos_observed |> \n  ggplot(aes(x = time_since_capture, y = leg_meas, group = roo_id)) + geom_line() + \n  facet_wrap(~age_at_capture)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.7.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /home/andrew/software/cmdstan\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.34.1\n```\n:::\n\n```{.r .cell-code}\nroo_age <- cmdstan_model(here::here(\"posts/2024-03-13-guessing-age/roo_age.stan\"))\nroo_age\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int n;\n  int nroo;\n  vector[n] leg;\n  vector[n] time_since_capture;\n  array[n] int<lower=1, upper=nroo> roo_id;\n  int n_known_age;\n  int n_unk_age;\n  vector[n_known_age] age_at_capture;\n  array[n_unk_age] int<lower=1, upper=nroo> ii_unobs;\n  array[n_known_age] int<lower=1, upper=nroo> ii_known;\n}\nparameters {\n  vector<lower=2>[n_unk_age] t0_param;\n  vector<lower=0,upper=1>[nroo] r;\n  real Lmax;\n  real<lower=0> sigma_meas;\n}\ntransformed parameters {\n  vector[nroo] t0;\n  t0[ii_known] = age_at_capture;\n  t0[ii_unobs] = t0_param;\n}\nmodel {\n  sigma_meas ~ exponential(1);\n  Lmax ~ normal(500, 50);\n  r ~ beta(.3*5, (1-.3)*5);\n  t0_param ~ uniform(2,10);\n  leg ~ normal(Lmax * (1 - exp(-r[roo_id] .* (time_since_capture + t0[roo_id]))), sigma_meas);\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## observed roo_id might not be identical to the TRUE roo_id, since its possible that I simulated a roo that never got sampled even once! This will cause a porblem with the indexing, because I'm using the roo_id also as a way to index into the vector of roo-level parameters (t0 and r)\n\nroos_observed$roo_id_obs <- as.numeric(as.factor(roos_observed$roo_id))\n\nroo_obs_ages <- roos_observed |> \n  group_by(roo_id_obs) |> \n  summarize(age_at_capture = unique(age_at_capture),\n            true_age_at_capture = min(age),\n            # original ID which doesn't need to be the one used in the model\n            roo_id = unique(roo_id)) |> \n  ungroup() |> \n  arrange(roo_id_obs)\n\n\n\n# get the data together\nroo_data <- list(n = length(roos_observed$roo_id_obs),\n     nroo = max(roos_observed$roo_id_obs),\n     leg = roos_observed$leg,\n     time_since_capture = roos_observed$time_since_capture,\n     roo_id = roos_observed$roo_id_obs,\n     n_known_age = sum(!is.na(roo_obs_ages$age_at_capture)),\n     ii_known = which(!is.na(roo_obs_ages$age_at_capture)),\n     n_unk_age = sum(is.na(roo_obs_ages$age_at_capture)),\n     ii_unobs = which(is.na(roo_obs_ages$age_at_capture)),\n     age_at_capture = roo_obs_ages$age_at_capture[which(!is.na(roo_obs_ages$age_at_capture))]\n     )\n\nroo_age_post <- roo_age$sample(data = roo_data,\n                               parallel_chains = 4, \n                               refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 4 finished in 2.0 seconds.\nChain 2 finished in 2.1 seconds.\nChain 3 finished in 2.2 seconds.\nChain 1 finished in 2.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 2.3 seconds.\nTotal execution time: 3.0 seconds.\n```\n:::\n:::\n\n\n## How did we do?\n\ngrowth rates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroo_age_post |> \n  gather_rvars(r[roo])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 310 × 3\n     roo .variable        .value\n   <int> <chr>        <rvar[1d]>\n 1     1 r          0.47 ± 0.178\n 2     2 r          0.46 ± 0.090\n 3     3 r          0.64 ± 0.270\n 4     4 r          0.42 ± 0.174\n 5     5 r          0.68 ± 0.134\n 6     6 r          0.53 ± 0.096\n 7     7 r          0.46 ± 0.197\n 8     8 r          0.59 ± 0.204\n 9     9 r          0.57 ± 0.134\n10    10 r          0.65 ± 0.152\n# ℹ 300 more rows\n```\n:::\n:::\n\n\ngrowth rate is consistently an underestimate! Why is that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt0_roos <- gather_rvars(\n  roo_age_post,\n  t0_param[roo_id_obs_post])\n\nlength(roo_data$ii_unobs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 155\n```\n:::\n\n```{.r .cell-code}\n## pull out the true ages using the subscripts\n\nroo_obs_ages[roo_data$ii_unobs,] |> \n  bind_cols(t0_roos) |> \n  ggplot(aes(x = true_age_at_capture, dist = .value)) + \n  stat_pointinterval()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nroos_observed |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 981\nColumns: 11\nGroups: roo_id [310]\n$ roo_id             <int> 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, …\n$ cohort_id          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ age                <int> 8, 9, 10, 12, 9, 10, 9, 10, 11, 12, 8, 10, 11, 9, 1…\n$ roo_gr             <dbl> 0.31, 0.31, 0.31, 0.31, 0.31, 0.31, 0.31, 0.31, 0.3…\n$ leg                <dbl> 45.81284, 46.92894, 47.74754, 48.78830, 46.92894, 4…\n$ year               <dbl> 2009, 2010, 2011, 2013, 2010, 2011, 2010, 2011, 201…\n$ is_caught          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ leg_meas           <dbl> 45.26342, 46.31263, 47.51444, 49.13035, 46.53499, 4…\n$ age_at_capture     <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ time_since_capture <dbl> 0, 1, 2, 4, 0, 1, 0, 1, 2, 3, 0, 2, 3, 0, 1, 3, 0, …\n$ roo_id_obs         <dbl> 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, …\n```\n:::\n\n```{.r .cell-code}\nroos_observed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 981 × 11\n# Groups:   roo_id [310]\n   roo_id cohort_id   age roo_gr   leg  year is_caught leg_meas age_at_capture\n    <int>     <int> <int>  <dbl> <dbl> <dbl>     <int>    <dbl>          <int>\n 1      1         1     8   0.31  45.8  2009         1     45.3             NA\n 2      1         1     9   0.31  46.9  2010         1     46.3             NA\n 3      1         1    10   0.31  47.7  2011         1     47.5             NA\n 4      1         1    12   0.31  48.8  2013         1     49.1             NA\n 5      2         1     9   0.31  46.9  2010         1     46.5             NA\n 6      2         1    10   0.31  47.7  2011         1     48.0             NA\n 7      3         1     9   0.31  46.9  2010         1     47.2             NA\n 8      3         1    10   0.31  47.7  2011         1     47.8             NA\n 9      3         1    11   0.31  48.3  2012         1     49.1             NA\n10      3         1    12   0.31  48.8  2013         1     49.3             NA\n# ℹ 971 more rows\n# ℹ 2 more variables: time_since_capture <dbl>, roo_id_obs <dbl>\n```\n:::\n:::\n\n\n## Back to the drawing board\n\nSimulate one roo and fit a simple model to it\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- 0:13\none_roo_mean <- vb_growth(time = time, r = .3, Lmax = 50)\n\none_roo_obs <- rnorm(\n  n = length(one_roo_mean),\n  mean = one_roo_mean,\n  sd = 1)\n\nplot(time, one_roo_obs)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_roo_age <- cmdstan_model(stan_file = , here::here(\"posts/2024-03-13-guessing-age/one_roo_age.stan\"))\n\none_roo_age\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int n;\n  vector[n] leg;\n  vector[n] time_since_capture;\n  real age_at_capture;\n}\nparameters {\n  real<lower=0,upper=1> r;\n  real Lmax;\n  real<lower=0> sigma_meas;\n}\nmodel {\n  r ~ beta(.3*5, (1-.3)*5);\n  Lmax ~ normal(50, 10);\n  sigma_meas ~ exponential(1);\n\n  leg ~ normal(Lmax * (1 - exp(-r * (time_since_capture + age_at_capture))), sigma_meas);\n}\ngenerated quantities {\n  vector[n] pred_leg;\n  for (i in 1:n){\n    pred_leg[i] = normal_rng(Lmax * (1 - exp(-r * (time_since_capture[i] + age_at_capture))), sigma_meas);\n  }\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_roo_age_post <- one_roo_age$sample(data = list(\n  n = length(time),\n  leg = one_roo_obs,\n  time_since_capture = time,\n  age_at_capture = 0),\n  refresh = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.0 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/tmp/RtmpzquOEM/model-4fd947767b294.stan', line 17, column 2 to column 89)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 2 finished in 0.0 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.5 seconds.\n```\n:::\n\n```{.r .cell-code}\none_roo_age_post |> \n  spread_rvars(pred_leg[time]) |> \n  ggplot(aes(x = time-1, dist = pred_leg)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\", direction = -1) + \n  geom_point(aes(x = time, y = leg),\n             data = tibble(time, leg = one_roo_obs), \n             size = 4,\n             \n             inherit.aes = FALSE, pch = 21, fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(500 * (1 - exp(-.3*x)), xlim = c(0, 13))\ncurve(500 * (1 - exp(-.3*(x - 2))), xlim = c(0, 13), add = TRUE)\ncurve(500 * (1 - exp(-.3*(x + 5))), xlim = c(0, 13), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## now try later in life\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- 0:13\n## remove the first 3 years of life\ntime_late <- time[-(1:3)]\nage_when_obs <- min(time_late)\ntime_since_obs <- time_late - age_when_obs\n\none_roo_mean <- vb_growth(time = time, r = .3, Lmax = 50)\n\none_roo_obs <- rnorm(\n  n = length(one_roo_mean),\n  mean = one_roo_mean,\n  sd = 1)\n\none_roo_obs_late <- one_roo_obs[-(1:3)]\n\nplot(time_since_obs, one_roo_obs_late, ylim = c(0, 55), xlim = c(-3, 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_roo_age_post <- one_roo_age$sample(data = list(\n  n = length(time_since_obs),\n  leg = one_roo_obs_late,\n  time_since_capture = time_since_obs,\n  age_at_capture = age_when_obs),\n  refresh = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.0 seconds.\nChain 2 finished in 0.0 seconds.\nChain 3 finished in 0.0 seconds.\nChain 4 finished in 0.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.0 seconds.\nTotal execution time: 0.5 seconds.\n```\n:::\n\n```{.r .cell-code}\none_roo_age_post |> \n  spread_rvars(pred_leg[time]) |> \n  ggplot(aes(x = time_since_obs, dist = pred_leg)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\", direction = -1) + \n  geom_point(aes(x = time, y = leg),\n             data = tibble(time = time_since_obs, leg = one_roo_obs_late), \n             size = 4,\n             \n             inherit.aes = FALSE, pch = 21, fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nif we know the age at the start\n\n\n## now try with unknown age\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_roo_age_unk <- cmdstan_model(stan_file = , here::here(\"posts/2024-03-13-guessing-age/one_roo_age_unk.stan\"))\n\none_roo_age_unk\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata {\n  int n;\n  vector[n] leg;\n  vector[n] time_since_capture;\n}\nparameters {\n  real<lower=0,upper=1> r;\n  real Lmax;\n  real<lower=0> sigma_meas;\n  real<lower=0> age_at_capture;\n}\nmodel {\n  sigma_meas ~ exponential(1);\n  Lmax ~ normal(50, 10);\n  r ~ beta(.3*5, (1-.3)*5);\n  age_at_capture ~ normal(3, 1);\n  leg ~ normal(Lmax * (1 - exp(-r * (time_since_capture + age_at_capture))), sigma_meas);\n}\ngenerated quantities {\n  vector[n] pred_leg;\n  for (i in 1:n){\n    pred_leg[i] = normal_rng(Lmax * (1 - exp(-r * (time_since_capture[i] + age_at_capture))), sigma_meas);\n  }\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_roo_age_unk_post <- one_roo_age_unk$sample(data = list(\n  n = length(time_since_obs),\n  leg = one_roo_obs_late,\n  time_since_capture = time_since_obs,\n  age_at_capture = age_when_obs),\n  refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.1 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 finished in 0.1 seconds.\nChain 4 finished in 0.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.1 seconds.\nTotal execution time: 0.5 seconds.\n```\n:::\n\n```{.r .cell-code}\none_roo_age_unk_post |> \n  spread_rvars(pred_leg[time]) |> \n  ggplot(aes(x = time-1, dist = pred_leg)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\", direction = -1) + \n  geom_point(aes(x = time, y = leg), tibble(time = time_since_obs, leg = one_roo_obs_late), \n             inherit.aes = FALSE, pch = 21, fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_roo_age_unk_post\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       variable  mean median   sd  mad    q5   q95 rhat ess_bulk ess_tail\n lp__           -5.20  -4.86 1.62 1.42 -8.34 -3.31 1.00     1137     1442\n r               0.30   0.30 0.03 0.03  0.25  0.35 1.01     1034     1068\n Lmax           49.57  49.53 0.74 0.66 48.46 50.83 1.01     1102     1151\n sigma_meas      0.77   0.73 0.21 0.18  0.51  1.17 1.00     1334     1454\n age_at_capture  3.12   3.10 0.35 0.33  2.60  3.72 1.00     1126     1449\n pred_leg[1]    29.90  29.90 1.02 0.92 28.21 31.56 1.00     2852     2950\n pred_leg[2]    35.01  35.00 0.90 0.81 33.54 36.50 1.00     3914     3365\n pred_leg[3]    38.75  38.76 0.90 0.82 37.28 40.19 1.00     3699     3457\n pred_leg[4]    41.55  41.56 0.88 0.81 40.18 42.97 1.00     3156     3299\n pred_leg[5]    43.58  43.58 0.87 0.80 42.18 44.95 1.00     3596     3582\n\n # showing 10 of 16 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n```\n:::\n:::\n\n\n\n\n## Start size\n\nthis could also be done with start size, asking what size is a roo at the end of the first year? this would be the first time measurement of each animal.\nto estimate age in the case where starting with start size, I would work on the log scale. then I would just go back 10 years (an oldish roo) from first measuremnet for every roo of unknown age. at every age past the first 2 (becuase these wld be young roos already measured) I would measure the probability of this roo happening on the start_size distribution.\n\n\n\n\n\n## Age predicts reproductive success\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}