{
  "hash": "71ce86d301e15abd21618ece567f2f21",
  "result": {
    "markdown": "---\ntitle: \"Modelling occupancy plus phenology\"\nauthor: \"Andrew MacDonald and Gabriel Bergeron\"\ndescription: |\n  Are the birds really there and when.\ndate: \"03 March 2023\"\ncategories: [UdeS, stan]\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nlibrary(cmdstanr)\n```\n:::\n\n\n## Occupancy models\n\nOccupancy models are a huge area of applied statistics in ecology. \nThey are particular flavours of logistic regression where we model two probabilities at once: the probability an animal occupies a site, and the probability it is detected if it is there. \n\n$$ \n\\begin{align}\nPr(y = 1) &= \\text{Bernoulli}(wp) \\\\\nw &= 1 - (1 - d)^{\\text{effort}} \\\\\n\\text{logit}(p) &= \\alpha \\\\\n\\text{logit}(d) &= \\beta \\\\\n\\alpha &\\sim \\text{N}(-1,0.5) \\\\\n\\beta &\\sim \\text{N}(0,0.5) \\\\\n\\end{align}\n$$\n\n$$ \n\\begin{align}\nPr(y = 0) &= (1 - d) ^ {\\text{effort}}p + 1 - p \\\\\n{logit}(p) &= \\alpha \n\\end{align}\n$$\n\nHere is a very simple occupancy model that controls for effort:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1 - (1 - .4)^x, xlim = c(0, 20))\nabline(v = 1, h = .4)\n```\n\n::: {.cell-output-display}\n![If an animal is present, you'll find it if you look hard enough. Think of dectability as the probability of finding the animal with 1 unit of effort (e.g. one person-hour), given that the animal is actually there.](index_files/figure-html/effort-curve-1.png){width=672}\n:::\n:::\n\n\nThis can also be done with the cloglog link, which is available in `glm`, `lmer` and friends using `family = binomial(link = 'cloglog')`. This lets you put effort in as an offset using `offset(log(effort))`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data <- tibble(\n  sample_id = 1:200,\n  real_pres = rbinom(n = length(sample_id),\n                     p = .2,\n                     size = 1),\n  sample_size = round(\n    runif(\n      n = length(sample_id),\n      min = 2, max = 40)\n  )) |>\n  rowwise() |> \n  mutate(pa = \n           if_else(real_pres == 1,\n                   true = list(rbinom(n = sample_size,\n                                 p = .6,\n                                 size = 1)),\n                   false = list(0)),\n         abd = sum(pa))\n\nggplot(fake_data, aes(x = sample_size, y = abd)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 5\n# Rowwise: \n   sample_id real_pres sample_size pa          abd\n       <int>     <int>       <dbl> <list>    <dbl>\n 1         1         0          34 <dbl [1]>     0\n 2         2         0          12 <dbl [1]>     0\n 3         3         0          11 <dbl [1]>     0\n 4         4         0          21 <dbl [1]>     0\n 5         5         0           8 <dbl [1]>     0\n 6         6         0          18 <dbl [1]>     0\n 7         7         0          28 <dbl [1]>     0\n 8         8         0          22 <dbl [1]>     0\n 9         9         1           3 <int [3]>     3\n10        10         0          26 <dbl [1]>     0\n# … with 190 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data |> \n  mutate(prop = abd/sample_size) |> \n  pull(prop) |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.142147\n```\n:::\n:::\n\n\nplot pres / absence\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_detections <- fake_data |> \n  mutate(at_least_one_detect = as.numeric(abd>0))\n\nfake_detections |> \n  ggplot(aes(x = sample_size, y = at_least_one_detect)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## validate a simple Stan model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n\nsimple_occ_logit <- cmdstan_model(\n  stan_file = here::here(\n    \"posts/2023-02-08-occupancy-in-time/simple_occ_logit.stan\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_list <- list(N = nrow(fake_detections),\n                  y = fake_detections$at_least_one_detect,\n                  sample_size = fake_detections$sample_size)\ndata_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$N\n[1] 200\n\n$y\n  [1] 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0\n [38] 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n [75] 1 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 0 0\n[112] 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 1 0 0\n[149] 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0\n[186] 0 0 0 1 1 1 0 0 0 1 0 0 0 0 1\n\n$sample_size\n  [1] 34 12 11 21  8 18 28 22  3 26 11 28 27 21 26 25  6 15 35 20  9 23  2 18 33\n [26] 16  9 15 20 37 25  8 23 26  2 23 12  6 36  4  4 19 16 14 17  4 39 19 14 32\n [51] 23 25 25 30 16 38 40 17 30 25 24 14 22 27 28  9 11 29 18 21 10 38 26 14 13\n [76] 29 19 28 21 15 11  4 21 31 33 18 26 14 12 21 16 17 14 36 38 30 16 33  6 26\n[101] 37 13 10 21 16 36 30 21 16 37 38 16 19 12 22  6 29 37 26  6 16 21 19 25 17\n[126] 26 32  5  4 14 24 29  7 26 11  7 18  3 12 15 29 13 24  3 20  7 13  5 35 11\n[151]  9 27 13 12 24 33 24 21 24 25 40 32 28 28  3 14 40 32 14 29 23  5 31 12 39\n[176] 18 20  7 10 33 34  3 17 19 27 23 22 12 22 10 12 31 37 10  8 36 37 19  6 31\n```\n:::\n:::\n\n\ntodo: extend the above using stantargets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_result <- simple_occ_logit$sample(data = data_list, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 1.4 seconds.\n```\n:::\n\n```{.r .cell-code}\nmodel_result$summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  variable     mean   median     sd    mad       q5      q95  rhat ess_bulk\n  <chr>       <dbl>    <dbl>  <dbl>  <dbl>    <dbl>    <dbl> <dbl>    <dbl>\n1 lp__     -120.    -119.    1.00   0.713  -122.    -119.     1.00    1812.\n2 p           0.244    0.244 0.0303 0.0302    0.196    0.296  1.00    2763.\n3 d           0.586    0.586 0.154  0.169     0.334    0.840  1.00    3509.\n# … with 1 more variable: ess_tail <dbl>\n```\n:::\n:::\n\n\nA resource on occupancy modelling: \n\nhttps://mc-stan.org/users/documentation/case-studies/dorazio-royle-occupancy.html\n\n\n## HOF functions\n\nthe idea here is two logistic curves multiplied together.\n\nLet's make it easier and use this form of the logistic:\n\n$$\n\\frac{1}{1 + e^{-s(x - d)}}\n$$\n\nwhere $s$ is the slope (or sensitivity?) and $d$ the inflection point (in our use case, the date at which the probability of presence becomes >.5)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1 / (1 + exp(-2 * (x - 1))), xlim = c(-4, 4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe multiply this by another curve, with some constraints: \n\n* the first curve goes up but the second goes down (slopes have opposite signs)\n* the second date is after the first\n\n$$\n\\frac{1}{1 + e^{s_1(x - d_1)}} \\times \\frac{1}{1 + e^{s_2(x - d_2)}}\n$$\n\nWhen we place this in a modelling context, we will want to keep these constraints while using any real number for the parameters. For the slopes, we can use the exponential function to make sure the sign of the $s$ parameters is always the same:\n\n$$\n\\frac{1}{1 + e^{-e^{s_1}(x - d_1)}} \\times \\frac{1}{1 + e^{e^{s_2}(x - d_2)}}\n$$\n\nlet's plot this and take a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1 <- -3\ns2 <- -3.5\nd1 <- 84 # approx Spring Equinox in JJ\nd2 <- 325 # approx Fall equinox in JJ\ncurve(\n  (1 / (1 + exp(-exp(s1) * (x - d1)))) * (1 / (1 + exp(exp(s2) * (x - d2)))),\n  xlim = c(0, 365)\n   )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAlso worth noting that the slopes should be quite close to 0 -- if the absolute value is too large then the curve doesn't fit in a year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog1p_exp <- function(x) log(1 + exp(x))\n\nlogHof <- function(x, s1, s2, d1, d2) exp(-log1p_exp((-exp(s1) * (x - d1))) - log1p_exp(exp(s2) * (x - d2)))\n\ncurve(logHof(x, s1 = -4, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), ylim = c(0,1))\n\ncurve(logHof(x, s1 = -3.5, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), add = TRUE, col = viridis::viridis(10)[1])\ncurve(logHof(x, s1 = -3, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), add = TRUE, col = viridis::viridis(10)[2])\ncurve(logHof(x, s1 = -2.5, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), add = TRUE, col = viridis::viridis(10)[3])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(logHof(x,\n             s1 = rnorm(1, mean = -2, sd = .5),\n             s2 = rnorm(1, mean = -2.5, sd = .5),\n             d1 = rnorm(1, mean = 130, sd = 7),\n             d2 = rnorm(1, mean = 230, sd = 7)\n             ),\n      xlim = c(0, 365),\n      ylim = c(0,1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nmake fake data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparam_list <- list(       \n  s1 = rnorm(1, mean = -2, sd = .5),\n  s2 = rnorm(1, mean = -2.5, sd = .5),\n  d1 = rnorm(1, mean = 130, sd = 7),\n  d2 = rnorm(1, mean = 230, sd = 7)\n)\n\nfake_data <- tibble(x = seq(30, 300, by = 7),\n       p = do.call(logHof, purrr::splice(param_list, x = x)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `splice()` was deprecated in purrr 1.0.0.\nℹ Please use `list_flatten()` instead.\n```\n:::\n\n```{.r .cell-code}\nfake_data |> \n  ggplot(aes(x = x, y = p)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfake_obs <- fake_data |> \n  rowwise() |> \n  mutate(obs = list(rbinom(n = 10, size = 1, prob = p))) |> \n  unnest(obs)\n\nfake_obs |> \n  ggplot(aes(x = x, y = obs)) + geom_count() + \n  geom_line(aes(y = p), col = \"darkorange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/Utilisateur/Documents/projects/aammd.github.io/posts/2023-02-08-occupancy-in-time\"\n```\n:::\n:::\n\n\n\n\nrun the stan model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhof <- cmdstan_model(stan_file = \n                       here::here(\n                         \"posts/2023-02-08-occupancy-in-time/hof.stan\"),\n                     pedantic = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpGIa3yu/model-6246e3e46b8.stan', line 19, column 14: Argument\n    230 suggests there may be parameters that are not unit scale; consider\n    rescaling with a multiplier (see manual section 22.12).\nWarning in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpGIa3yu/model-6246e3e46b8.stan', line 18, column 14: Argument\n    130 suggests there may be parameters that are not unit scale; consider\n    rescaling with a multiplier (see manual section 22.12).\n```\n:::\n\n```{.r .cell-code}\nhof\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\n// HOF model with perfect detection\ndata {\n  int<lower=0> n;\n  array[n] int<lower=0, upper=1> y;\n  vector[n] jday;\n}\nparameters {\n  real s1;\n  real s2;\n  real d1;\n  real d2;\n}\nmodel {\n  vector[n] p;\n  p = exp(-(log1p_exp(-exp(s1) * (jday - d1)) + log1p_exp(exp(s2) * (jday - d2))));\n  s1 ~ normal(-2,   .5);\n  s2 ~ normal(-2.5, .5);\n  d1 ~ normal(130, 7);\n  d2 ~ normal(230, 7);\n  y ~ bernoulli(p);\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhof_sample <- hof$sample(data = list(n = nrow(fake_obs),\n                       y = fake_obs$obs,\n                       jday = fake_obs$x), \n                       refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 2.3 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Rejecting initial value:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2   Log probability evaluates to log(0), i.e. negative infinity.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2   Stan can't start sampling from this initial value.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 2 finished in 2.0 seconds.\nChain 3 finished in 2.1 seconds.\nChain 4 finished in 2.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 2.2 seconds.\nTotal execution time: 9.4 seconds.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhof_sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n variable   mean median   sd  mad      q5    q95 rhat ess_bulk ess_tail\n     lp__ -98.54 -98.22 1.40 1.26 -101.26 -96.87 1.00     2347     2872\n     s1    -2.04  -2.04 0.17 0.17   -2.31  -1.77 1.00     4239     2896\n     s2    -2.58  -2.58 0.13 0.13   -2.80  -2.37 1.00     4428     3301\n     d1   137.64 137.64 2.25 2.25  133.99 141.30 1.00     4488     3067\n     d2   226.01 226.02 2.79 2.87  221.41 230.62 1.00     4440     3189\n```\n:::\n\n```{.r .cell-code}\nparam_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$s1\n[1] -1.993494\n\n$s2\n[1] -2.75037\n\n$d1\n[1] 134.2251\n\n$d2\n[1] 230.4547\n```\n:::\n:::\n\n\ndraw the curve\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidybayes)\n\nspread_rvars(hof_sample, s1, s2, d1, d2) |> \n  bind_cols(x = seq(30, 300, by = 7)) |> \n  mutate(p = logHof(x, s1, s2, d1, d2)) |> \n  ggplot(aes(x = x, dist = p)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\") + \n  geom_count(aes(x = x, y = obs), inherit.aes = FALSE, data = fake_obs, pch = 21, fill = \"darkorange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}