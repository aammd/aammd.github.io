{
  "hash": "0eef399833bae9c7786a449ce747ccc0",
  "result": {
    "markdown": "---\ntitle: \"Modelling occupancy plus phenology\"\nauthor: \"Andrew MacDonald and Gabriel Bergeron\"\ndescription: |\n  Are the birds really there and when.\ndate: \"03 March 2023\"\ncategories: [UdeS, stan]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\n## occupancy models\n\n$$ \n\\begin{align}\nPr(y = 1) &= \\text{Bernoulli}(wp) \\\\\nw &= 1 - (1 - d)^{\\text{effort}} \\\\\n\\text{logit}(p) &= \\alpha \\\\\n\\text{logit}(d) &= \\beta \\\\\n\\alpha &\\sim \\text{N}(-1,0.5) \\\\\n\\beta &\\sim \\text{N}(0,0.5) \\\\\n\\end{align}\n$$\n\n$$ \n\\begin{align}\nPr(y = 0) &= (1 - d) ^ {\\text{effort}}p + 1 - p \\\\\n{logit}(p) &= \\alpha \n\\end{align}\n$$\n\nvery simple occupancy model that controls for effort\n\n$$\ny = \n\\begin{cases}\n y = 1, wp \\\\\n y = 0, (1 - w)p + 1 - p\n\\end{cases}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1 - (1 - .4)^x, xlim = c(0, 20))\nabline(v = 1, h = .4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis can also be done with the cloglog link\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data <- tibble(sample_id = 1:200,\n                    real_pres = rbinom(n = length(sample_id),\n                                       p = .2,\n                                       size = 1),\n                    sample_size = round(\n                      runif(\n                        n = length(sample_id),\n                        min = 2, max = 40)\n                    )) |>\n  rowwise() |> \n  mutate(pa = list(rbinom(n = sample_size,\n                          p = .6,\n                          size = 1)),\n         abd = sum(pa) * real_pres)\n\nggplot(fake_data, aes(x = sample_size, y = abd)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 5\n# Rowwise: \n   sample_id real_pres sample_size pa           abd\n       <int>     <int>       <dbl> <list>     <int>\n 1         1         0          36 <int [36]>     0\n 2         2         0          13 <int [13]>     0\n 3         3         0          36 <int [36]>     0\n 4         4         0          13 <int [13]>     0\n 5         5         0           8 <int [8]>      0\n 6         6         0          33 <int [33]>     0\n 7         7         1          12 <int [12]>    11\n 8         8         0          37 <int [37]>     0\n 9         9         0          34 <int [34]>     0\n10        10         0           4 <int [4]>      0\n# … with 190 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data |> \n  mutate(prop = abd/sample_size) |> \n  pull(prop) |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1238422\n```\n:::\n:::\n\n\nplot pres / absence\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_detections <- fake_data |> \n  mutate(at_least_one_detect = as.numeric(abd>0))\n\nfake_detections |> \n  ggplot(aes(x = sample_size, y = at_least_one_detect)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## validate a simple Stan model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.5.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.31.0\n```\n:::\n\n```{.r .cell-code}\nsimple_occ_logit <- cmdstan_model(\n  stan_file = here::here(\n    \"posts/2023-02-08-occupancy-in-time/simple_occ_logit.stan\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_list <- list(N = nrow(fake_detections),\n                  y = fake_detections$at_least_one_detect,\n                  sample_size = fake_detections$sample_size)\ndata_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$N\n[1] 200\n\n$y\n  [1] 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 0 0\n [38] 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0\n [75] 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0\n[112] 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0\n[149] 1 0 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0\n[186] 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0\n\n$sample_size\n  [1] 36 13 36 13  8 33 12 37 34  4 29 20 22 17 27  4 36  4 20  9 18 30 35 15 29\n [26] 39  8 28  7 19  5 12  8 27 10 30 20 17 24  6 14 24 31  5  5 31 22 31 28 25\n [51]  4 23 27 14 30 34 26 12 35 11 15 23 35 21 14 25 12 25 34 29  2  5 33 24 14\n [76] 11 29 28 33 12 34 18 13 39 22 31  4 15 26 13 15 33 31 20 36 31  9 26 22 38\n[101]  9  3 24 12 11 28 36 34 38 12 25  9 28  4  9 11 37  5 16 16 12 25 19  6 21\n[126]  5 37 27 31 23 38  4 31  3 29 38 33 24  7 27 12 19  8  8 23 18  9 37 10  3\n[151] 26 24 16  4  4 31 26 30 31 29 10 36 16 11 22 38 30 17  7 23 15 31  3 29 21\n[176] 27 23  4 33 19 31  4 22  5 15 38 38 23 20 24 13  5  7 23 26 17 31 32  3 14\n```\n:::\n:::\n\n\ntodo: extend the above using stantargets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_result <- simple_occ_logit$sample(data = data_list, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 0.2 seconds.\nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.3 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 1.5 seconds.\n```\n:::\n\n```{.r .cell-code}\nmodel_result$summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  variable     mean   median     sd    mad       q5      q95  rhat ess_bulk\n  <chr>       <dbl>    <dbl>  <dbl>  <dbl>    <dbl>    <dbl> <dbl>    <dbl>\n1 lp__     -112.    -112.    1.09   0.715  -114.    -111.     1.00    1596.\n2 p           0.216    0.215 0.0297 0.0289    0.171    0.267  1.00    2519.\n3 d           0.558    0.551 0.160  0.172     0.297    0.827  1.00    2536.\n# … with 1 more variable: ess_tail <dbl>\n```\n:::\n:::\n\n\nA resource on occupancy modelling: \n\nhttps://mc-stan.org/users/documentation/case-studies/dorazio-royle-occupancy.html\n\n\n## HOF functions\n\nthe idea here is two logistic curves multiplied together.\n\nLet's make it easier and use this form of the logistic:\n\n$$\n\\frac{1}{1 + e^{-s(x - d)}}\n$$\n\nwhere $s$ is the slope (or sensitivity?) and $d$ the inflection point (in our use case, the date at which the probability of presence becomes >.5)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1 / (1 + exp(-2 * (x - 1))), xlim = c(-4, 4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe multiply this by another curve, with some constraints: \n\n* the first curve goes up but the second goes down (slopes have opposite signs)\n* the second date is after the first\n\n$$\n\\frac{1}{1 + e^{s_1(x - d_1)}} \\times \\frac{1}{1 + e^{s_2(x - d_2)}}\n$$\n\nWhen we place this in a modelling context, we will want to keep these constraints while using any real number for the parameters. For the slopes, we can use the exponential function to make sure the sign of the $s$ parameters is always the same:\n\n$$\n\\frac{1}{1 + e^{-e^{s_1}(x - d_1)}} \\times \\frac{1}{1 + e^{e^{s_2}(x - d_2)}}\n$$\n\nlet's plot this and take a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1 <- -3\ns2 <- -3.5\nd1 <- 84 # approx Spring Equinox in JJ\nd2 <- 325 # approx Fall equinox in JJ\ncurve(\n  (1 / (1 + exp(-exp(s1) * (x - d1)))) * (1 / (1 + exp(exp(s2) * (x - d2)))),\n  xlim = c(0, 365)\n   )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nAlso worth noting that the slopes should be quite close to 0 -- if the absolute value is too large then the curve doesn't fit in a year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog1p_exp <- function(x) log(1 + exp(x))\n\nlogHof <- function(x, s1, s2, d1, d2) exp(-log1p_exp((-exp(s1) * (x - d1))) - log1p_exp(exp(s2) * (x - d2)))\n\ncurve(logHof(x, s1 = -4, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), ylim = c(0,1))\n\ncurve(logHof(x, s1 = -3.5, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), add = TRUE, col = viridis::viridis(10)[1])\ncurve(logHof(x, s1 = -3, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), add = TRUE, col = viridis::viridis(10)[2])\ncurve(logHof(x, s1 = -2.5, s2 = -0.5, d1 = d1, d2 = d2), xlim = c(0, 365), add = TRUE, col = viridis::viridis(10)[3])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(logHof(x,\n             s1 = rnorm(1, mean = -2, sd = .5),\n             s2 = rnorm(1, mean = -2.5, sd = .5),\n             d1 = rnorm(1, mean = 130, sd = 7),\n             d2 = rnorm(1, mean = 230, sd = 7)\n             ),\n      xlim = c(0, 365),\n      ylim = c(0,1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nmake fake data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparam_list <- list(       \n  s1 = rnorm(1, mean = -2, sd = .5),\n  s2 = rnorm(1, mean = -2.5, sd = .5),\n  d1 = rnorm(1, mean = 130, sd = 7),\n  d2 = rnorm(1, mean = 230, sd = 7)\n)\n\nfake_data <- tibble(x = seq(30, 300, by = 7),\n       p = do.call(logHof, purrr::splice(param_list, x = x)))\n\nfake_data |> \n  ggplot(aes(x = x, y = p)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfake_obs <- fake_data |> \n  rowwise() |> \n  mutate(obs = list(rbinom(n = 10, size = 1, prob = p))) |> \n  unnest(obs)\n\nfake_obs |> \n  ggplot(aes(x = x, y = obs)) + geom_count() + \n  geom_line(aes(y = p), col = \"darkorange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/amacdonald/Documents/Projects/aammd.github.io/posts/2023-02-08-occupancy-in-time\"\n```\n:::\n:::\n\n\n\n\nrun the stan model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhof <- cmdstan_model(stan_file = \n                       here::here(\n                         \"posts/2023-02-08-occupancy-in-time/hof.stan\"),\n                     pedantic = TRUE)\n\nhof\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\n// HOF model with perfect detection\ndata {\n  int<lower=0> n;\n  array[n] int<lower=0, upper=1> y;\n  vector[n] jday;\n}\nparameters {\n  real s1;\n  real s2;\n  real d1;\n  real d2;\n}\nmodel {\n  vector[n] p;\n  p = exp(-(log1p_exp(-exp(s1) * (jday - d1)) + log1p_exp(exp(s2) * (jday - d2))));\n  s1 ~ normal(-2,   .5);\n  s2 ~ normal(-2.5, .5);\n  d1 ~ normal(130, 7);\n  d2 ~ normal(230, 7);\n  y ~ bernoulli(p);\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhof_sample <- hof$sample(data = list(n = nrow(fake_obs),\n                       y = fake_obs$obs,\n                       jday = fake_obs$x), \n                       refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 sequential chains...\n\nChain 1 finished in 1.5 seconds.\nChain 2 finished in 1.5 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Rejecting initial value:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3   Log probability evaluates to log(0), i.e. negative infinity.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3   Stan can't start sampling from this initial value.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 3 finished in 1.4 seconds.\nChain 4 finished in 1.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.4 seconds.\nTotal execution time: 5.7 seconds.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhof_sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n variable    mean  median   sd  mad      q5     q95 rhat ess_bulk ess_tail\n     lp__ -163.33 -162.99 1.43 1.23 -166.12 -161.66 1.00     1815     2972\n     s1     -2.88   -2.88 0.15 0.15   -3.14   -2.64 1.00     3095     3025\n     s2     -3.01   -3.01 0.17 0.17   -3.29   -2.72 1.00     3009     3136\n     d1    142.06  142.01 3.73 3.67  136.08  148.44 1.00     2742     2897\n     d2    228.19  228.21 3.80 3.77  221.78  234.25 1.00     3279     3099\n```\n:::\n\n```{.r .cell-code}\nparam_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$s1\n[1] -3.03759\n\n$s2\n[1] -2.835324\n\n$d1\n[1] 142.4126\n\n$d2\n[1] 234.9143\n```\n:::\n:::\n\n\ndraw the curve\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidybayes)\n\nspread_rvars(hof_sample, s1, s2, d1, d2) |> \n  bind_cols(x = seq(30, 300, by = 7)) |> \n  mutate(p = logHof(x, s1, s2, d1, d2)) |> \n  ggplot(aes(x = x, dist = p)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\") + \n  geom_count(aes(x = x, y = obs), inherit.aes = FALSE, data = fake_obs, pch = 21, fill = \"darkorange\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthietic with geom_ribbon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `linewidth`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthietic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `linewidth`.\nUnknown or uninitialised column: `linewidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}