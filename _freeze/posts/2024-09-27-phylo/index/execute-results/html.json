{
  "hash": "ae5570b67c90df9928e7e8d8c72241ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Phylogeny\"\nauthor: \"Andrew MacDonald\"\ndescription: |\n  it is that (evolutionary) time.\ndate: 27 Sept 2024\neditor: source\ncategories: [UdeS, stan]\ndraft: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\nsimulating data on a phylogeny and fitting it in Stan! \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## simulate data\nset.seed(1618)\nn <- 20\nb0 <- 0\nb1 <- .5\nlam.x <- .98\nlam.e <- .5\nphy <- ape::compute.brlen(\n  ape::rtree(n=n),\n  method = \"Grafen\",\n  power = 1)\n\nplot(phy)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nphy.x <- phylolm::transf.branch.lengths(\n  phy=phy, model=\"lambda\",\n  parameters=list(lambda = lam.x))$tree\n\nphy.e <- phylolm::transf.branch.lengths(\n  phy=phy, model=\"lambda\",\n  parameters=list(lambda = lam.e))$tree\n\nx <- ape::rTraitCont(phy.x, model = \"BM\", sigma = 1)\ne <- ape::rTraitCont(phy.e, model = \"BM\", sigma = .3)\nx <- x[match(names(e), names(x))]\nY <- b0 + b1 * x + e\nY <- array(Y)\nrownames(Y) <- phy$tip.label\n\nplot(x, Y)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo <- cmdstanr::cmdstan_model(here::here(\"posts/2024-09-27-phylo/phylo.stan\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_sample <- phylo$sample(data = list(\n  n = n,\n  s = n,\n  x = x,\n  y = Y,\n  phyvcv = ape::vcv(phy)\n),parallel_chains = 4, refresh = 1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.3 seconds.\nChain 3 finished in 0.3 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 0.4 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\nphylo_sample\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       variable  mean median   sd  mad    q5   q95 rhat ess_bulk ess_tail\n lp__           17.69  18.06 1.98 1.76 13.82 20.18 1.00     1647     1995\n b0              0.10   0.10 0.12 0.11 -0.11  0.30 1.00     4569     2966\n b1              0.47   0.47 0.09 0.09  0.31  0.62 1.00     4505     2628\n sigma_x         0.99   0.97 0.17 0.15  0.76  1.29 1.00     5194     2478\n sigma_y         0.29   0.28 0.05 0.05  0.22  0.39 1.00     3419     2141\n logit_lambda_x  3.00   3.00 0.20 0.21  2.66  3.33 1.00     5124     2945\n logit_lambda_y -0.01  -0.01 0.20 0.20 -0.35  0.32 1.00     4689     2874\n lambda_x        0.95   0.95 0.01 0.01  0.93  0.97 1.00     5124     2945\n lambda_y        0.50   0.50 0.05 0.05  0.41  0.58 1.00     4689     2874\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}