{
  "hash": "6cc55e07a1c0423091fc796f42d8084a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Phylogeny\"\nauthor: \"Andrew MacDonald\"\ndescription: |\n  it is that (evolutionary) time.\ndate: 27 Sept 2024\neditor: source\ncategories: [UdeS, stan]\ndraft: false\neditor_options: \n  chunk_output_type: console\nbibliography: references.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\n\nI've always wanted to learn more about phylogenetic regressions, and thanks to my colleauge Alex Fuster I recently had the opportunity to sit down and work on them. The literature on the topic is *confusing*, large, and not always clear about what model is being fit. I relied heavily on two resources:\n\n-   one book, a free online resource from Tony Ives [@ives]\n-   a preprint, an excellent review of the use and misuse of Pagel's Lambda by @pearse\n\n## Why a phylogenetic regression?\n\nSuppose you have two traits, measured across many different species – say, social group size (Trait X) and brain size (Trait Y). You want to test the hypothesis that bigger social groups mean a bigger brain. However there's a catch: some of the species are closely related, and others are not. Its entirely possible that any apparent correlation between Trait X and Trait Y comes from random chance: both traits change randomly along evolutionary time. That means that distantly related species have more time to become different to each other, and close relatives have less \"time apart\" and are therefore less likely to be different in their two traits.\n\nBecause every kind of cross-species comparison involves a group of species with a phylogenetic structure, \"controlling for phylogeny\" has become very common in these kinds of studies. Also, because we are usually missing traits for at least some species in our studies, people often use phylogeny as a guide for guessing what trait values are present in the animals that we haven't measured.\n\n## Recipe for phylogeny\n\nI love the large and flexible toolbox of Bayesian methods because it can be adapted to fit such a huge array of models – virtually all the models that ecologists want to fit! However, there's a catch: to fit a model using Stan (or something similar) you have to know *exactly* what model you're fitting. However, because these regressions are usually fit using custom software, it can be a challenge to dig to find the exact equations being fit!\n\nUsing the two resources mentioned above, I was able to write down (I hope!) the equation for the model like this:\n\n$$\n\\begin{align}\ny_i &= \\bar{y} + \\beta_1 x_i + a_{s[i]} \\\\\na_{s} &\\sim \\text{MVNormal}(0, \\Sigma_a)\\\\\n\\Sigma_a &= \\begin{bmatrix}\n\\sigma_a^2 & \\lambda_a \\cdot \\sigma_{12} & \\cdots & \\lambda_a \\cdot \\sigma_{1,s} \\\\\n\\lambda_a \\cdot \\sigma_{21} & \\sigma_a^2 & \\cdots & \\lambda_a \\cdot \\sigma_{2,s} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\lambda_a \\cdot \\sigma_{s,1} & \\lambda_a \\cdot \\sigma_{s,2} & \\cdots & \\sigma_a^2\n\\end{bmatrix} \\\\\nx_i &= \\bar{x} + b_{s[i]} \\\\\nb_{s} &\\sim \\text{MVNormal}(0, \\Sigma_b)\\\\\n\\Sigma_b &= \\begin{bmatrix}\n\\sigma_b^2 & \\lambda_b \\cdot \\sigma_{12} & \\cdots & \\lambda_b \\cdot \\sigma_{1,s} \\\\\n\\lambda_b \\cdot \\sigma_{21} & \\sigma_b^2 & \\cdots & \\lambda_b \\cdot \\sigma_{2,s} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\lambda_b \\cdot \\sigma_{s,1} & \\lambda_b \\cdot \\sigma_{s,2} & \\cdots & \\sigma_b^2\n\\end{bmatrix}\n\\end{align}\n$$ {#eq-phyloreg}\n\n:::{.callout-note}\nYou can see that there is no likelihood for the $y_i$ and $x_i$ values. That's because I'm starting from a simple case where we know the true values for each species. The only thing to estimate is how variable these traits are among species, and how much of that variation correlates with phylogeny. Later I'll show an example that is closer to real life.\n:::\n\n\nYou can see that there are two big variance-covariance matrices here, for the effects of phylogeny on $y$ and $x$. \nThese covariance matrices have three ingredients that are all put together: \n\n1. _the base_ How far apart are species on the phylogeny? Many ecologists work with trees where all the tips end at the present day -- so all species have the same amount of time going back to their last common ancestor. For trees like this, the diagonal is 1 (i.e., 100% of the evolutionary time). The off-diagonals are the proportion of this total time which is shared between species.\n2. _the flavour_ This is a model of species averages. If there were no effect of phylogeny at all, we would still expect species to be a little different. But how different are species from each other? That is controlled by a standard deviation, $\\sigma$, which we multiply the whole matrix by to scale it. \n3. _the secret sauce_ The off-diagnal elements of $\\Sigma$ are multiplied by **another** number between 0 and 1: this is \"Pagel's Lambda\". It acts like a tuning knob, adjusting the amount of phylogenetic flavour that makes it into the model. When $\\lambda$ is 1, we have the maximum amount of covariance coming from the phylogeny. When $\\lambda$ is 0, we are back to an identity matrix and the species are independent. \n\nThere's another way to write this equation that makes these three parts more clear to see. First we have to make $V_{phy}$, which is the _phylogenetic variance-covariance matrix_. This has variances and covariances for each species on our tree. For example, for 3 species the phylogenetic variance covariance matrix is:\n\n$$\nV_{phy} = \\begin{bmatrix}\n\\sigma_1^2 & \\sigma_{12} & \\sigma_{1,3} \\\\\n\\sigma_{2,1} & \\sigma_2^2 & \\sigma_{2,3} \\\\\n\\sigma_{3,1} & \\sigma_{3,2} & \\sigma_3^2\n\\end{bmatrix}\n$$\nThe covariances are equal to the proportion of the tree that is shared between two species. The diagonal is the amount of time between the tree's start and each species. This means that, for a tree where all the tips end at the present day, the diagonal is 1 and the off-diagonal is between 0 and 1.\n\nThen, we can write the expression for $\\Sigma$ like this:\n\n$$\n\\Sigma = \\sigma^2 \\lambda V_{phy} + \\sigma^2 (1 - \\lambda) \\mathbf{I}\n$$\nThis is equation 4 in @pearse. \n\n\nI can rewrite @eq-phyloreg in this style:\n\n$$ \n\\begin{align}\ny_i &= \\bar{y} + \\beta_1 x_i + a_{s[i]} \\\\\na_{s} &\\sim \\text{MVNormal}(0, \\Sigma_a)\\\\\n\\Sigma_a &= \\sigma_a^2 \\lambda_a V_{phy} + \\sigma_a^2 (1 - \\lambda_a) \\mathbf{I} \\\\\nx_i &= \\bar{x} + b_{s[i]} \\\\\nb_{s} &\\sim \\text{MVNormal}(0, \\Sigma_b)\\\\\n\\Sigma_b &= \\sigma_b^2 \\lambda_b V_{phy} + \\sigma_b^2 (1 - \\lambda_b) \\mathbf{I} \\\\\n\\end{align}\n$$ {#eq-lambda-decomp}\n\n\n$$ \n\\begin{align}\ny_i &\\sim \\text{Normal}(\\bar{y} + \\beta_1 x_i + a_{s[i]}, \\sigma_y) \\\\\na_{s} &\\sim \\text{MVNormal}(0, \\Sigma_a)\\\\\n\\Sigma_a &= \\sigma_a^2 \\lambda_a V_{phy} + \\sigma_a^2 (1 - \\lambda_a) \\mathbf{I} \\\\\nx_i &\\sim \\text{Normal}(\\bar{x} + b_{s[i]}, \\sigma_x) \\\\\nb_{s} &\\sim \\text{MVNormal}(0, \\Sigma_b)\\\\\n\\Sigma_b &= \\sigma_b^2 \\lambda_b V_{phy} + \\sigma_b^2 (1 - \\lambda_b) \\mathbf{I} \\\\\n\\end{align}\n$$ {#eq-lambda-decomp}\n\nYou can see I'm using two different trait variances ($\\sigma_a$ and $\\sigma_b$) and two different amounts of phylogenetic signal ($\\lambda_a$ and $\\lambda_b$), one for each trait.\n\n\n## Data simulation\n\nHere is simulation code from @ives , which generates a dataset where there is a signal for phylogeny and also a relationship between two traits of interest. I'll use this code to generate a dataset and then estimate the known parameters with a Stan model:\n\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n## simulate data\nset.seed(1618)\nn <- 20\nb0 <- 0\nb1 <- 0\nlambda_x <- .98\nlambda_y <- .8\nsigma_y <- .2\nsigma_x <- .2\n\nphy <- ape::compute.brlen(\n  ape::rtree(n=n),\n  method = \"Grafen\",\n  power = 1)\n\nplot(phy)\n```\n\n::: {.cell-output-display}\n![a simulated phylogeny](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nphy.x <- phylolm::transf.branch.lengths(\n  phy=phy, model=\"lambda\",\n  parameters=list(lambda = lambda_x))$tree\n\nphy.e <- phylolm::transf.branch.lengths(\n  phy=phy, model=\"lambda\",\n  parameters=list(lambda = lambda_y))$tree\n\nx <- ape::rTraitCont(phy.x, model = \"BM\", sigma = sigma_x)\ne <- ape::rTraitCont(phy.e, model = \"BM\", sigma = sigma_y)\nx <- x[match(names(e), names(x))]\nY <- b0 + b1 * x + e\nY <- array(Y)\nrownames(Y) <- phy$tip.label\n\nplot(x, Y)\n```\n\n::: {.cell-output-display}\n![simulated data, with both a phylogenetic signal and a causal relationship between trait X and trait Y.](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\n\nHere's a simple Stan program which fits the model in @eq-lambda-decomp to these simulated data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo <- cmdstanr::cmdstan_model(here::here(\"posts/2024-09-27-phylo/phylo.stan\"))\n\nphylo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\ndata {\n  int n;\n  int s;\n  vector[n] x;\n  vector[n] y;\n  matrix[s, s] phyvcv;\n}\nparameters {\n  real b0;\n  real b1;\n  real sigma_x;\n  real sigma_y;\n  real logit_lambda_x;\n  real logit_lambda_y;\n}\ntransformed parameters {\n  real<lower=0,upper=1> lambda_x;\n  lambda_x = inv_logit(logit_lambda_x);\n  // y\n  real<lower=0,upper=1> lambda_y;\n  lambda_y = inv_logit(logit_lambda_y);\n}\nmodel {\n  b0 ~ std_normal();\n  b1 ~ normal(.5, .5);\n  sigma_x ~ exponential(1);\n  sigma_y ~ exponential(1);\n  logit_lambda_x ~ normal(3, .2);\n  logit_lambda_y ~ normal(0, .2);\n\n  matrix[s, s] vcv_x;\n  vcv_x = add_diag(sigma_x^2*lambda_x*phyvcv, sigma_x^2*(1 - lambda_x));\n\n\n  matrix[s, s] vcv_y;\n  vcv_y = add_diag(sigma_y^2*lambda_y*phyvcv, sigma_y^2*(1 - lambda_y));\n\n\n  x ~ multi_normal(rep_vector(0, n), vcv_x);\n  y ~ multi_normal(b0 + b1*x, vcv_y);\n}\n```\n\n\n:::\n:::\n\n\n\nNow we'll sample the model and plot the posterior distribution of some parameters against the truth:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_sample <- phylo$sample(data = list(\n  n = n,\n  s = n,\n  x = x,\n  y = Y,\n  phyvcv = ape::vcv(phy)\n),parallel_chains = 4, refresh = 1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 finished in 0.3 seconds.\nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.3 seconds.\nChain 3 finished in 0.3 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 0.5 seconds.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_rvar_df <- function(post_draws){\n  post_draws |> \n    posterior::as_draws_rvars() |> \n    # list any parameter that isn't a scalar\n    map_if(\\(x) length(x)>1, list) |> \n    tibble::as_tibble()\n}\n\n\nplot_true_post <- function(truth_df, post_draws_df){\n\n  true_post_df <- truth_df |> \n    left_join(post_draws_df, by = \"name\")\n  \n  true_post_df |> \n    ggplot(aes(y = name, dist = posterior))+ \n    tidybayes::stat_dist_slab() + \n    geom_vline(aes(xintercept = value)) + \n    facet_wrap(~name, scales=\"free\")\n}\n\n\ntruth <- data.frame(sigma_x, sigma_y, b0, \n           b1, lambda_x, lambda_y) |> \n  pivot_longer(cols = everything())\n\n\nposterior_dist_long <- make_rvar_df(phylo_sample) |> \n  select(b0:lambda_y) |> \n  pivot_longer(cols = everything(), values_to = \"posterior\")\n\nplot_true_post(truth, post_draws_df = posterior_dist_long)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can see that, at least for these values, parameter recovery isn't bad, especially for the coefficients $\\beta_0$ and $\\beta_1$. However, at least in this simulation, the parameters describing the phylogenetic signal are all underestimated.\n\n\n## Tips from the forum\n\nI posted about this model in the [Stan Discourse](https://discourse.mc-stan.org/t/phylogenetic-regression-in-stan-can-this-model-be-improved/36748/2) forum and I had the good luck to get feedback from Bob Carpenter! Here is the model after including those suggested changes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_forum <- cmdstanr::cmdstan_model(here::here(\"posts/2024-09-27-phylo/phylo_forum.stan\"))\n\nphylo_forum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\ndata {\n  int<lower=0> n;\n  int<lower=0> s;\n  vector[n] x;\n  vector[n] y;\n  cov_matrix[s] phyvcv;\n}\ntransformed data {\n  vector[n] zero_vec = rep_vector(0, n);\n}\nparameters {\n  real b0;\n  real<offset=0.5, multiplier=0.5> b1;\n  real<lower=0> sigma_x;\n  real<lower=0> sigma_y;\n  real<offset=3, multiplier=0.2> logit_lambda_x;\n  real<multiplier=0.2> logit_lambda_y;\n}\ntransformed parameters {\n  real<lower=0, upper=1> lambda_x = inv_logit(logit_lambda_x);\n  real<lower=0, upper=1> lambda_y = inv_logit(logit_lambda_y);\n}\nmodel {\n  b0 ~ std_normal();\n  b1 ~ normal(0.5, 0.5);\n  sigma_x ~ exponential(1);\n  sigma_y ~ exponential(1);\n  logit_lambda_x ~ normal(3, .2);\n  logit_lambda_y ~ normal(0, .2);\n\n  matrix[s, s] vcv_x\n    = sigma_x^2 * add_diag(lambda_x * phyvcv, 1 - lambda_x);\n  matrix[s, s] vcv_y\n    = sigma_y^2 * add_diag(lambda_y * phyvcv, 1 - lambda_y);\n  x ~ multi_normal(zero_vec, vcv_x);\n  y ~ multi_normal(b0 + b1 * x, vcv_y);\n}\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_forum_sample <- phylo_forum$sample(data = list(\n  n = n,\n  s = n,\n  x = x,\n  y = Y,\n  phyvcv = ape::vcv(phy)\n),parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 finished in 0.4 seconds.\nChain 2 finished in 0.4 seconds.\nChain 3 finished in 0.4 seconds.\nChain 4 finished in 0.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.4 seconds.\nTotal execution time: 0.5 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\ntruth <- data.frame(sigma_x, sigma_y, b0, \n           b1, lambda_x, lambda_y) |> \n  pivot_longer(cols = everything())\n\n\nphylo_forum_sample_long <- make_rvar_df(phylo_forum_sample) |> \n  select(b0:lambda_y) |> \n  pivot_longer(cols = everything(), values_to = \"posterior\")\n\nplot_true_post(truth, post_draws_df = phylo_forum_sample_long)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nWe get get pretty similar results to the above!\n\n\nand an even simpler strategy, replacing the lambda parameter on the logit scale with a beta:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_beta <- cmdstanr::cmdstan_model(here::here(\"posts/2024-09-27-phylo/phylo_beta.stan\"))\n\nphylo_beta\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\ndata {\n  int<lower=0> n;\n  int<lower=0> s;\n  vector[n] x;\n  vector[n] y;\n  cov_matrix[s] phyvcv;\n}\ntransformed data {\n  vector[n] zero_vec = rep_vector(0, n);\n}\nparameters {\n  real b0;\n  real<offset=0.5, multiplier=0.5> b1;\n  real<lower=0> sigma_x;\n  real<lower=0> sigma_y;\n  real<lower=0,upper=1> lambda_x;\n  real<lower=0,upper=1> lambda_y;\n}\nmodel {\n  b0 ~ std_normal();\n  b1 ~ normal(0.5, 0.5);\n  sigma_x ~ exponential(1);\n  sigma_y ~ exponential(1);\n  lambda_x ~ beta(9, 1);\n  lambda_y ~ beta(5, 5);\n\n  matrix[s, s] vcv_x\n    = sigma_x^2 * add_diag(lambda_x * phyvcv, 1 - lambda_x);\n  matrix[s, s] vcv_y\n    = sigma_y^2 * add_diag(lambda_y * phyvcv, 1 - lambda_y);\n  x ~ multi_normal(zero_vec, vcv_x);\n  y ~ multi_normal(b0 + b1 * x, vcv_y);\n}\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_beta_sample <- phylo_beta$sample(data = list(\n  n = n,\n  s = n,\n  x = x,\n  y = Y,\n  phyvcv = ape::vcv(phy)\n),parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 finished in 0.4 seconds.\nChain 3 finished in 0.4 seconds.\nChain 2 finished in 0.5 seconds.\nChain 4 finished in 0.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.4 seconds.\nTotal execution time: 0.6 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\nphylo_beta_sample\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n variable  mean median   sd  mad    q5   q95 rhat ess_bulk ess_tail\n lp__     48.08  48.42 1.84 1.68 44.56 50.43 1.00     1586     2164\n b0        0.08   0.09 0.07 0.07 -0.04  0.20 1.00     4003     2241\n b1        0.07   0.06 0.23 0.22 -0.30  0.45 1.00     4309     3115\n sigma_x   0.19   0.19 0.04 0.04  0.14  0.27 1.00     3146     2817\n sigma_y   0.16   0.16 0.03 0.03  0.12  0.22 1.00     3296     3381\n lambda_x  0.92   0.93 0.06 0.06  0.80  0.99 1.00     3008     1832\n lambda_y  0.54   0.55 0.13 0.14  0.32  0.75 1.00     3309     2876\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_beta_sample_long <- make_rvar_df(phylo_beta_sample) |> \n  select(b0:lambda_y) |> \n  pivot_longer(cols = everything(), values_to = \"posterior\")\n\nplot_true_post(truth, post_draws_df = phylo_beta_sample_long)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Repeated sampling of these traits\n\nThe simulation above is giving species *means*. However in our study we have more than one measurement per species. Measurements of \"Trait X\" and \"Trait Y\" are measured on different individuals. In fact, are coming from two completely different datasets! Of course, in the real-world application there will be all kinds of quirky differences between the two datasets: different amounts of effort per species and different species measured in each dataset.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nsuppressPackageStartupMessages(library(ape))\n\nset.seed(1618)\n\n# set true parameter values\nn <- 20\nb0_x <- 4\nb0_y <- .5\nb_xy <- -.1\nlam.x <- .98\nlam.e <- .5\nsigma_x <- .4\nsigma_y <- .3\n\n\n\n# simulate phylogeny\nphy <- ape::compute.brlen(\n  ape::rtree(n=n),\n  method = \"Grafen\",\n  power = 1.5)\n\nplot(phy)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# get names from this matrix! needs to line up perfectly\nphyvcv <- ape::vcv(phy)\n\ndistmat_names <- dimnames(phyvcv)[[1]]\n\n# observations per species\nn_obs <- 15\n\n\nphy.x <- phylolm::transf.branch.lengths(\n  phy=phy, model=\"lambda\",\n  parameters=list(lambda = lam.x))$tree\n\nphy.e <- phylolm::transf.branch.lengths(\n  phy=phy, model=\"lambda\",\n  parameters=list(lambda = lam.e))$tree\n\nx <- ape::rTraitCont(phy.x, model = \"BM\", sigma = sigma_x)\ne <- ape::rTraitCont(phy.e, model = \"BM\", sigma = sigma_y)\nx <- x[match(names(e), names(x))]\n\n## calculate Y\nY <- b0_y + b_xy * x + e\n## calculate X\nX <- b0_x + x\n\n# Y <- array(Y)\nnames(Y) <- phy$tip.label\n\nplot(X, Y)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code}\nobs_xy_df <- tibble(X, Y, sp_name = names(x)) |> \n  mutate(\n    sp_id = as.numeric(\n      factor(sp_name, \n             levels = distmat_names))) |> \n  rowwise() |> \n  mutate(obs_x = list(\n    rnorm(n_obs, mean = X, sd = .3)),\n    obs_y = list(rnorm(n_obs, mean = Y, sd = .3)))\n\n\nx_obs_df <- obs_xy_df |> \n  select(sp_id, obs_x) |> unnest(obs_x)\n\n\ny_obs_df <- obs_xy_df |> \n  select(sp_id, obs_y) |> unnest(obs_y)\n```\n:::\n\n\n\nfit a model that is ready for replication per species:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_obs_cen <- cmdstanr::cmdstan_model(here::here(\"posts/2024-09-27-phylo/phylo_obs_cen.stan\"))\n\nphylo_obs_cen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\ndata {\n  int<lower=0> s;\n  // x trait\n  int<lower=0> n_x;\n  vector[n_x] x_obs;\n  array[n_x] int<lower=1,upper=s> sp_id_x;\n  // y trait\n  int<lower=0> n_y;\n  vector[n_y] y_obs;\n  array[n_y] int<lower=1,upper=s> sp_id_y;\n  cov_matrix[s] phyvcv;\n}\ntransformed data {\n  vector[s] zero_vec = rep_vector(0, s);\n}\nparameters {\n  real<offset=2,multiplier=2> b0_x;\n  real<offset=.5,multiplier=.8> b0_y;\n  real<offset=0.5, multiplier=0.5> b_xy;\n  real<lower=0> sigma_x;\n  real<lower=0> sigma_y;\n  real<lower=0, upper=1> lambda_x;\n  real<lower=0, upper=1> lambda_y;\n  vector[s] x_avg;\n  vector[s] y_avg;\n  real<lower=0> sigma_x_obs;\n  real<lower=0> sigma_y_obs;\n}\nmodel {\n  b0_x ~ normal(2, 2);\n  b0_y ~ normal(.5, .8);\n  b_xy ~ normal(0, .2);\n  sigma_x ~ exponential(1);\n  sigma_y ~ exponential(1);\n  lambda_x ~ beta(9, 1);\n  lambda_y ~ beta(5, 5);\n\n  matrix[s, s] vcv_x\n    = sigma_x^2 * add_diag(lambda_x * phyvcv, 1 - lambda_x);\n  matrix[s, s] vcv_y\n    = sigma_y^2 * add_diag(lambda_y * phyvcv, 1 - lambda_y);\n\n  sigma_x_obs ~ exponential(1);\n  sigma_y_obs ~ exponential(1);\n  // species averages\n  x_avg ~ multi_normal(zero_vec, vcv_x);\n  y_avg ~ multi_normal(b_xy * x_avg, vcv_y);\n  // observations of these\n  x_obs ~ normal(b0_x + x_avg[sp_id_x], sigma_x_obs);\n  y_obs ~ normal(b0_y + y_avg[sp_id_y], sigma_y_obs);\n}\n```\n\n\n:::\n:::\n\n\n\nSampling the model -- this produces some warnings that are safe to ignore at this point.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphylo_obs_cen_samp <- phylo_obs_cen$sample(data = list(\n  s = n,\n  # trait x\n  n_x = nrow(x_obs_df),\n  x_obs = x_obs_df$obs_x,\n  sp_id_x = x_obs_df$sp_id,\n  # trait y\n  n_y = nrow(y_obs_df),\n  y_obs = y_obs_df$obs_y,\n  sp_id_y = y_obs_df$sp_id,\n  # phylogeny\n  phyvcv = phyvcv\n),parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 1 finished in 3.1 seconds.\nChain 3 finished in 3.1 seconds.\nChain 2 finished in 3.4 seconds.\nChain 4 finished in 3.5 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 3.3 seconds.\nTotal execution time: 3.6 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\nphylo_obs_cen_samp$summary(variables = c(\n  \"b0_x\", \"b0_y\", \"b_xy\", \"sigma_x\", \"sigma_y\", \"lambda_x\", \"lambda_y\", \"sigma_x_obs\", \"sigma_y_obs\"\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 10\n  variable       mean  median     sd    mad     q5   q95  rhat ess_bulk ess_tail\n  <chr>         <dbl>   <dbl>  <dbl>  <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl>\n1 b0_x         4.07    4.08   0.210  0.206   3.71  4.40   1.01     325.     412.\n2 b0_y         0.620   0.624  0.138  0.131   0.384 0.834  1.01     340.     458.\n3 b_xy        -0.0456 -0.0454 0.161  0.157  -0.312 0.216  1.00    2158.    2701.\n4 sigma_x      0.368   0.355  0.0861 0.0802  0.249 0.529  1.00    1610.    2143.\n5 sigma_y      0.293   0.285  0.0665 0.0636  0.202 0.414  1.00    1150.    2272.\n6 lambda_x     0.975   0.984  0.0275 0.0170  0.922 0.999  1.00    1866.    1631.\n7 lambda_y     0.470   0.470  0.140  0.148   0.238 0.700  1.00    1688.    2455.\n8 sigma_x_obs  0.288   0.288  0.0122 0.0122  0.269 0.309  1.00    2010.    2422.\n9 sigma_y_obs  0.313   0.313  0.0130 0.0126  0.293 0.336  1.00    2201.    2530.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntruth_df <- tribble(\n  ~name, ~value,\n  \"b0_x\", b0_x,\n  \"b0_y\", b0_y,\n  \"b_xy\", b_xy,\n  \"sigma_x\", sigma_x,\n  \"sigma_y\", sigma_y,\n  \"lambda_x\", lambda_x,\n  \"lambda_y\", lambda_y\n)\n\nphylo_obs_cen_samp_long <- make_rvar_df(phylo_obs_cen_samp) |> \n  select(-x_avg, -y_avg) |> \n  pivot_longer(cols = everything(), values_to = \"posterior\")\n\nplot_true_post(truth_df = truth_df, \n               post_draws_df = phylo_obs_cen_samp_long)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nspecies averages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrvar_list <- phylo_obs_cen_samp |> posterior::as_draws_rvars() |> \n  pluck(\"b0_x\")\n\n\nx_avg_post_long <- make_rvar_df(phylo_obs_cen_samp) |> \n  # calculate averages\n  select(x_avg) |> \n  unnest(x_avg) |> \n  rownames_to_column(var = \"sp_id\") |> \n  mutate(sp_id = readr::parse_number(sp_id),\n         x_total_avg = rvar_list + x_avg )\n\n  \n  \nobs_xy_df |> \n  left_join(x_avg_post_long) |> \n  ggplot(aes(x = sp_name, dist = x_total_avg))+ \n  tidybayes::stat_dist_slab() + \n    geom_point(aes(x = sp_name, y = X))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sp_id)`\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n### Missing data\n\nMany people use phylogenetic information to help when a dataset is missing a lot of traits.\n\nHere I'm using the same model as above but imagining that a few species are never measured for trait X, but *are* measured for trait y. There's also phylogenetic information on both traits. \n\nNotice that there's no need to rewrite the model for this! all I need to do is take out some observations from the dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove some from the output\n\nabsent_sp <- sample(x_obs_df$sp_id |> unique(), size = 7, replace = FALSE)\n  \nx_obs_NA_df <- x_obs_df |> \n  filter(!(sp_id %in% absent_sp))\n\n\nphylo_obs_NA_samp <- phylo_obs_cen$sample(data = list(\n  s = n,\n  # trait x\n  n_x = nrow(x_obs_NA_df),\n  x_obs = x_obs_NA_df$obs_x,\n  sp_id_x = x_obs_NA_df$sp_id,\n  # trait y\n  n_y = nrow(y_obs_df),\n  y_obs = y_obs_df$obs_y,\n  sp_id_y = y_obs_df$sp_id,\n  # phylogeny\n  phyvcv = phyvcv\n),parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChain 2 finished in 3.2 seconds.\nChain 4 finished in 3.8 seconds.\nChain 1 finished in 3.8 seconds.\nChain 3 finished in 3.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 3.7 seconds.\nTotal execution time: 3.9 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\nrvar_list <- phylo_obs_NA_samp |> \n  posterior::as_draws_rvars() |> \n  pluck(\"b0_x\")\n\n\nx_avg_post_long <- make_rvar_df(phylo_obs_NA_samp) |> \n  # calculate averages\n  select(x_avg) |> \n  unnest(x_avg) |> \n  rownames_to_column(var = \"sp_id\") |> \n  mutate(sp_id = readr::parse_number(sp_id),\n         x_total_avg = rvar_list + x_avg )\n\n  \n  \nobs_xy_df |> \n  left_join(x_avg_post_long) |> \n  mutate(absent = sp_id %in% absent_sp) |> \n  ggplot(aes(x = sp_name, dist = x_total_avg))+ \n  tidybayes::stat_dist_slab() + \n    geom_point(aes(x = sp_name, y = X, col = absent))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## scalar parameters\nphylo_obs_NA_samp_long <- make_rvar_df(phylo_obs_NA_samp) |> \n  select(-x_avg, -y_avg) |> \n  pivot_longer(cols = everything(), values_to = \"posterior\")\n\nplot_true_post(truth_df = truth_df, \n               post_draws_df = phylo_obs_NA_samp_long)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n:::\n\n\n\nThe model estimates latent parameters for species averages, which are then measured with error. \nThis makes it easy to model unmeasured values. \nIn Bayesian inference, unmeasured quantities are all treated the same, and called \"parameters\". \nSo here, we're modelling _all_ species averages as latent parameters, and saying that most, but not all, actually get measured.\nThe result is posterior samples, not only for slopes and other values of interest, but also for the unmeasured species averages.\n\n\nYou can see that the distributions are much flatter for these unmeasured species averages, compared to those that were measured. However, you can also see that the unmeasured averages are moving around, influenced by information coming from Pagel's Lambda and the other parameters of the model as well. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}