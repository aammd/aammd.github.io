{
  "hash": "dc83d54df66f7445873ce6eb4d1e49a2",
  "result": {
    "markdown": "---\ntitle: \"Growth curves\"\nauthor: \"Andrew\"\ndate: \"2022-10-14\"\ncategories: [stan, simulation]\nfreeze: true\nimage: gq_fig-1.png\nexecute: \n  eval: true\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nsuppressPackageStartupMessages(library(cmdstanr))\n```\n:::\n\n\nMany animals and plants grow quickly when small and more slowly as they mature. There are many popular ways of describing this relationship; one very common and convenient relationship is the Von-Bertanalaffy (VB) growth curve:\n\n$$\nL_t = L_0e^{-rt} + L_\\infty(1 - e^{-rt})\n$$ {#eq-vb}\n\nThis can also be written as\n\n$$\nL_t = L_\\infty - (L_\\infty - L_0)e^{-rt}\n$$\n\nThis curve has a long tradition in ecology. It can be derived from simple assumptions about how different aspects of metabolism scale with the body size of an organism. I'm not going to derive it here because I don't want this to be a huge post!\n\nI like this second way of writing the equation because it highlights that the VB equation is a linear transformation of an exponential function. We start out at $L_0$ and exponentially decay towards $L_\\infty$.\n\n## a single tree\n\nI'm going to do a simple simulation of one tree growing. here is code that does that\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_vb_one_tree <- function(\n    time = seq(from = 10, to = 200, by = 5),\n    Lo = .01,\n    Lmax = 150,\n    r = .03,\n    sd = 5){\n  tibble::tibble(time,\n                 Lt = Lmax - (Lmax - Lo) * exp(-r*time),\n                 Lt_obs  = rnorm(length(Lt),\n                                 mean = Lt,\n                                 sd = 5))\n}\n\nvb_one_tree <- sim_vb_one_tree()\n\nvb_one_tree |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() + \n  geom_line(aes(y = Lt)) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Recover parameters\n\nHere is a stan model that matches this data generating process:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata{\n  int<lower=0> n;\n  vector[n] time;\n  vector[n] Lt;\n}\nparameters{\n  real<lower=0> r;\n  real<lower=0> Lmax;\n  real<lower=0> sigma_obs;\n}\nmodel{\n  Lt ~ normal(Lmax * (1 - exp(-r*time)), sigma_obs);\n  r ~ lognormal(-3, 1);\n  Lmax ~ normal(200, 20);\n  sigma_obs ~ exponential(1);\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_tree_sim <- sim_vb_one_tree(\n    Lmax = 150,\n    r = .03,\n    sd = 5)\n\none_tree_list <- list(n = nrow(one_tree_sim),\n                      time  = one_tree_sim$time, \n                      Lt = one_tree_sim$Lt_obs)\n\none_tree_post <- vb_one_tree$sample(data = one_tree_list,\n                                    refresh = 0L,\n                                    parallel_chains = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.3 seconds.\nChain 3 finished in 0.3 seconds.\nChain 4 finished in 0.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 0.6 seconds.\n```\n:::\n\n```{.r .cell-code}\none_tree_post$summary() |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|variable  |        mean|      median|        sd|       mad|          q5|         q95|     rhat| ess_bulk| ess_tail|\n|:---------|-----------:|-----------:|---------:|---------:|-----------:|-----------:|--------:|--------:|--------:|\n|lp__      | -81.8860891| -81.5629000| 1.2657731| 0.9996431| -84.3295600| -80.5472350| 1.003900| 1703.367| 2248.792|\n|r         |   0.0304818|   0.0304662| 0.0009926| 0.0009715|   0.0289095|   0.0321072| 1.001307| 2264.785| 2502.303|\n|Lmax      | 149.9838068| 149.9775000| 1.1024073| 1.1037957| 148.2009500| 151.7842500| 1.001047| 2435.377| 2339.762|\n|sigma_obs |   4.5019228|   4.4569000| 0.5106312| 0.4890727|   3.7627420|   5.4062315| 1.000617| 2204.440| 2327.323|\n:::\n:::\n\n\nThese posterior intervals cover the numbers used to make up the data pretty well! \nLet's look at the model predictions on a figure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpected_df <- one_tree_post |> \n  spread_rvars(Lmax, r) |> \n  expand_grid(time = seq(0, 200, length.out = 14)) |> \n  mutate(Lt = Lmax * (1 - exp(-r * time)))\n\nexpected_plot <- expected_df |> \n  ggplot(aes(x = time, ydist = Lt)) + \n  stat_dist_lineribbon()\nexpected_plot\n```\n\n::: {.cell-output-display}\n![Growth curve for one tree. the line shows the expected value, with posterior uncertainty around exactly what that average should be.](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis relationship shows the *average* line, the expected size of the tree. We can add the original data like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_tree_sim |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() +\n  stat_dist_lineribbon(aes(x = time, dist = Lt),\n                  data = expected_df, inherit.aes = FALSE) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nAt the time of this writing the error messages here are particularly unhelpful. If you try to use `stat_lineribbon` rather than `stat_dist_lineribbon` you get the following misleading message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_tree_sim |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() +\n  stat_lineribbon(aes(x = time, y = Lt),\n                  data = expected_df, inherit.aes = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Discrete value supplied to continuous scale\n```\n:::\n:::\n\n\n## Adding measurement error\n\nThe above model reproduces predictions of the original line, but ignores measurement error. Here's a few ways to add that into this same approach:\n\n### Simulating observations in R\n\nOne way to do this is after the fact, using the handy tidyverse `dplyr::rowwise()` syntax, combined with `posterior::rfun()`. The latter function transforms `rnorm` into a function that both takes and produces an `rvar`, the specialized format for working with posterior draws. \nThe latter function makes sure we redo this for every row of our dataframe.\n \n\n::: {.cell}\n\n```{.r .cell-code}\nexpected_df <- one_tree_post |> \n  spread_rvars(Lmax, r, sigma_obs) |> \n  expand_grid(time = seq(0, 200, length.out = 14)) |> \n  mutate(Lt = Lmax * (1 - exp(-r * time))) |> \n  rowwise() |> \n  mutate(Lt_obs = posterior::rfun(rnorm)(n = 1, mean = Lt, sd = sigma_obs))\n\nexpected_df |> \n  ggplot(aes(x = time, dist = Lt_obs)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\") + \n  geom_point(aes(y = Lt_obs), data = one_tree_sim,\n             pch = 21, fill = \"darkorange\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThis has the advantage of happening all in R, keeping our posterior distribution slim.  \nHowever sometimes it can be both convenient and more readable to keep the whole process inside Stan, and here's how:\n\n### Posterior predictive simulations in Stan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvb_one_tree_gq <- cmdstan_model(here::here(\"posts\", \n                                        \"2022-10-14-growth_curve_measurement_error\",\n                                        \"vb_one_tree_gq.stan\"))\n\nvb_one_tree_gq\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata{\n  int<lower=0> n;\n  vector[n] time;\n  vector[n] Lt;\n  int<lower=0> n_new;\n  vector[n_new] time_new;\n}\nparameters{\n  real<lower=0> r;\n  real<lower=0> Lmax;\n  real<lower=0> sigma_obs;\n}\nmodel{\n  Lt ~ normal(Lmax * (1 - exp(-r*time)), sigma_obs);\n  r ~ lognormal(-3, 1);\n  Lmax ~ normal(200, 20);\n  sigma_obs ~ exponential(1);\n}\ngenerated quantities{\n  vector[n_new] Lt_predicted;\n\n  for (i in 1:n_new){\n    Lt_predicted[i] = normal_rng(Lmax * (1 - exp(-r*time_new[i])), sigma_obs);\n  }\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\none_tree_predictions <- vb_one_tree_gq$sample(\n  data = purrr::splice(one_tree_list,\n                       time_new = seq(0, 200, length.out = 14),\n                       n_new = 14),\n  refresh = 0L,\n  parallel_chains = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.3 seconds.\nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.3 seconds.\nTotal execution time: 0.5 seconds.\n```\n:::\n\n```{.r .cell-code}\none_tree_predictions |> \n  spread_rvars(Lt_predicted[i]) |> \n  mutate(time_new = seq(0, 200, length.out = 14)) |> \n  ggplot(aes(x = time_new, dist = Lt_predicted)) + \n  stat_lineribbon() +\n  scale_fill_brewer(palette = \"Greens\") + \n  geom_point(aes(x = time, y = Lt_obs), \n             inherit.aes = FALSE,\n             data = one_tree_sim,\n             pch = 21, fill = \"darkorange\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](gq_fig-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}