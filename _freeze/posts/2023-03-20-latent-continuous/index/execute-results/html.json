{
  "hash": "776986ad5a3a7a1385242cd4b3e8339b",
  "result": {
    "markdown": "---\ntitle: \"Latent continuous variables\"\nauthor: \"Andrew MacDonald\"\ndescription: |\n  Modelling continuous latent states in Stan.\ndate: 20 March 2023\neditor: source\ncategories: [UdeS, stan]\ndraft: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nlibrary(cmdstanr)\n```\n:::\n\n\nImagine we have many measurments, all correlated with each other. Where do these correlations come from?\nOne possibility is that all these measurents are _caused_ by the values of some unobservable, latent trait. \nThis happens in ecology when we imagine that, for example, the **Competitive Ability** of a species appears to us in the form of measurable traits that (to us) seem to represent this trait: leaf size, growth rate, alleopathy, etc. \n\n![Five different observable variables (in squares), all caused by one latent variable (round).](dag.png)\n\nIn mathematics, this model is the following:\n\n$$\n\n\\begin{align}\nY_{ij} &\\sim \\text{Normal}(\\mu_{ij}, \\sigma) \\\\\n\\mu_{ij} &= \\alpha_i \\times \\beta_j\\\\\n\\boldsymbol{ \\alpha } &\\sim \\text{Normal}(0, 1) \\\\\n\\boldsymbol{ \\beta } &\\sim \\text{Normal}(0, 1) \\\\\n\\end{align}\n\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nalpha <- runif(200, min = -2, max = 2)\n\nfive_betas <- c(2,-1, .5, 1, -.3)\n\nsigma_obs <- .6\n\nymean <- alpha %o% five_betas\n\n## sample a random number for each of these and put in back\n\nind <- which(ymean != 0, arr.ind = TRUE)\n\nyobs <- matrix(rep(0L, times = 200*5), nrow = 200, ncol = 5)\nyobs[ind] <- rnorm(n = 200*5, mean = ymean[ind], sd = sigma_obs)\n```\n:::\n\n\n:::{.callout-warning}\nMy toxic trait is that I like for-loops but never write them\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(yobs)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/pairsplot-1.png){width=672}\n:::\n:::\n\n\n### A first, simple stan model\n\nFor a first attempt, I'll try a model that encodes the generative process above, coded in Stan:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_continuous <- cmdstan_model(\n  stan_file = here::here(\"posts/2023-03-20-latent-continuous/latent_continuous.stan\"))\n\nlatent_continuous\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\n\ndata {\n  int<lower=0> N;\n  matrix[N, 5] y;\n}\nparameters {\n  row_vector[5] beta;\n  real<lower=0> sigma;\n  vector[N] alpha;\n}\nmodel {\n  // take the outer product: alpha multiplied by each beta in turn\n  matrix[N, 5] mu = alpha * beta;\n  for (i in 1:N){\n    y[i] ~ normal(mu[i], sigma);\n  }\n  beta ~ std_normal();\n  sigma ~ exponential(1);\n  alpha ~ std_normal();\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndatalist <- list(N = nrow(yobs),\n                 y = yobs)\n\nlatent_cont_samp <- latent_continuous$sample(\n  data = datalist, parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/RtmpDw2oa1/model-566f1bdf5dc6.stan', line 15, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 2 finished in 22.5 seconds.\nChain 1 finished in 22.9 seconds.\nChain 4 finished in 22.7 seconds.\nChain 3 finished in 22.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 22.7 seconds.\nTotal execution time: 23.1 seconds.\n```\n:::\n\n```{.r .cell-code}\nlatent_cont_samp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n variable   mean median    sd   mad      q5    q95 rhat ess_bulk ess_tail\n lp__     -91.59 -91.33 14.44 14.43 -116.18 -68.55 1.01      639     1462\n beta[1]   -0.01   0.01  2.26  3.34   -2.41   2.40 1.74        6      280\n beta[2]    0.01   0.00  1.18  1.74   -1.26   1.27 1.74        6      226\n beta[3]    0.00   0.00  0.60  0.88   -0.67   0.66 1.74        6      125\n beta[4]    0.00   0.01  1.17  1.72   -1.26   1.26 1.74        6      170\n beta[5]    0.00   0.00  0.34  0.50   -0.40   0.40 1.74        6      105\n sigma      0.60   0.60  0.01  0.01    0.57   0.62 1.00     5143     2824\n alpha[1]   0.00  -0.07  1.06  1.54   -1.31   1.31 1.73        6      149\n alpha[2]   0.00  -0.03  0.53  0.72   -0.73   0.76 1.73        6      137\n alpha[3]   0.00  -0.01  0.48  0.66   -0.70   0.71 1.73        6      122\n\n # showing 10 of 207 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n```\n:::\n:::\n\n\nthat was.. a spectacular failure! I suspect this is because the parameters are not identifiable: there's no way to know, from the model's perspective, if a particular trait is in a positive or negative relationship to the latent state. What if I try constraining these?\n\n## Partially constrained model\n\nIn this model I set constraints on the sign of the coefficients that relate the latent state to any observed variable. This is the sort of thing that would work in most ecological systems. For example, if an underlying state is \"competitive ability\" we might know it relates positively to traits like growth rate and leaf size, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_cont_constrained <- cmdstan_model(\n  stan_file = here::here(\n    \"posts/2023-03-20-latent-continuous/latent_cont_constrained.stan\"))\n\nlatent_cont_constrained\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\n\ndata {\n  int<lower=0> N;\n  matrix[N, 5] y;\n}\nparameters {\n  row_vector[5] beta;\n  real<lower=0> sigma;\n  vector[N] alpha;\n}\ntransformed parameters {\n  row_vector[5] betatrans;\n  betatrans[1] = exp(beta[1]);\n  betatrans[2] = -exp(beta[2]);\n  betatrans[3] = exp(beta[3]);\n  betatrans[4] = exp(beta[4]);\n  betatrans[5] = -exp(beta[5]);\n}\nmodel {\n  // take the outer product: alpha multiplied by each beta in turn\n  matrix[N, 5] mu = alpha * betatrans;\n  for (i in 1:N){\n    y[i] ~ normal(mu[i], sigma);\n  }\n  beta ~ std_normal();\n  sigma ~ exponential(1);\n  alpha ~ std_normal();\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_cont_constrained_samp <- latent_cont_constrained$sample(\n  data = datalist, parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Exception: normal_lpdf: Location parameter[1] is inf, but must be finite! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c943da0867.stan', line 23, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c943da0867.stan', line 23, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 2 finished in 12.0 seconds.\nChain 3 finished in 12.2 seconds.\nChain 1 finished in 12.3 seconds.\nChain 4 finished in 12.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 12.2 seconds.\nTotal execution time: 12.4 seconds.\n```\n:::\n\n```{.r .cell-code}\nlatent_cont_constrained_samp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n variable   mean median    sd   mad      q5    q95 rhat ess_bulk ess_tail\n lp__     -84.70 -84.05 15.31 15.23 -110.27 -60.68 1.00      618      960\n beta[1]    0.83   0.83  0.05  0.05    0.74   0.91 1.00      526      968\n beta[2]    0.18   0.17  0.06  0.06    0.08   0.28 1.00      667     1292\n beta[3]   -0.51  -0.51  0.09  0.09   -0.66  -0.37 1.00     1385     2103\n beta[4]    0.17   0.17  0.06  0.06    0.06   0.27 1.00      648     1108\n beta[5]   -1.07  -1.06  0.13  0.13   -1.30  -0.87 1.00     2402     1938\n sigma      0.60   0.60  0.02  0.01    0.57   0.62 1.00     5000     2966\n alpha[1]  -1.03  -1.02  0.21  0.22   -1.37  -0.69 1.00     5037     2288\n alpha[2]   0.48   0.48  0.21  0.21    0.14   0.83 1.00     8091     2531\n alpha[3]   0.43   0.43  0.20  0.20    0.09   0.77 1.00     8381     2650\n\n # showing 10 of 212 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n```\n:::\n\n```{.r .cell-code}\n# tidybayes::get_variables(latent_cont_constrained_samp)\n\ntidybayes::gather_rvars(latent_cont_constrained_samp, betatrans[id]) |> \n  mutate(true_value = five_betas) |> \n  ggplot(aes(x = id, dist  = .value)) + \n  tidybayes::stat_halfeye(fill = \"darkgreen\") + \n  geom_point(aes(x = id, y = true_value), pch = 21, fill = \"orange\", size = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nSo it seems that with some simple constraints on the signs, this model samples just fine! \n\n\nDoes it also get the latent states right? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidybayes::summarise_draws(latent_cont_constrained_samp, quantile) |> \n  filter(stringr::str_detect(variable, \"alpha\")) |> \n  bind_cols(true_alpha = alpha) |> \n  mutate(id = readr::parse_number(variable),\n         rnk = dense_rank(true_alpha)) |> \n  ggplot(aes(x = `25%`, xend = `75%`, y = rnk, yend = rnk)) + \n  geom_segment() + \n  geom_point(aes(x = true_alpha, y  = rnk), inherit.aes = FALSE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nWhat if we experiment with a standard deviation for the alpha (ie a hierarchical model)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_cont_constr_hier <- cmdstan_model(\n  stan_file = here::here(\"posts/2023-03-20-latent-continuous/latent_cont_constr_hier.stan\"))\n\nlatent_cont_constr_hier\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\n\ndata {\n  int<lower=0> N;\n  matrix[N, 5] y;\n}\nparameters {\n  row_vector[5] beta;\n  real<lower=0> sigma;\n  vector[N] alpha;\n  real<lower=0> s_alpha;\n}\ntransformed parameters {\n  row_vector[5] betatrans;\n  betatrans[1] = exp(beta[1]);\n  betatrans[2] = -exp(beta[2]);\n  betatrans[3] = exp(beta[3]);\n  betatrans[4] = exp(beta[4]);\n  betatrans[5] = -exp(beta[5]);\n}\nmodel {\n  // take the outer product: alpha multiplied by each beta in turn\n  matrix[N, 5] mu = alpha * betatrans;\n  for (i in 1:N){\n    y[i] ~ normal(mu[i], sigma);\n  }\n  beta ~ std_normal();\n  sigma ~ exponential(1);\n  alpha ~ normal(0, s_alpha);\n  s_alpha ~ exponential(.1);\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_cont_constr_hier_samp <- latent_cont_constr_hier$sample(\n  data = datalist, parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c940a3b623.stan', line 24, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c940a3b623.stan', line 28, column 2 to column 29)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c940a3b623.stan', line 28, column 2 to column 29)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c940a3b623.stan', line 28, column 2 to column 29)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 3 finished in 20.9 seconds.\nChain 4 finished in 23.3 seconds.\nChain 1 finished in 23.9 seconds.\nChain 2 finished in 25.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 23.4 seconds.\nTotal execution time: 25.7 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 4 of 4 chains had an E-BFMI less than 0.2.\nSee https://mc-stan.org/misc/warnings for details.\n```\n:::\n\n```{.r .cell-code}\ntidybayes::summarise_draws(latent_cont_constr_hier_samp, quantile) |> \n  filter(stringr::str_detect(variable, \"alpha\\\\[\")) |> \n  bind_cols(true_alpha = alpha) |> \n  mutate(id = readr::parse_number(variable),\n         rnk = dense_rank(true_alpha)) |> \n  ggplot(aes(x = `25%`, xend = `75%`, y = rnk, yend = rnk)) + \n  geom_segment() + \n  geom_point(aes(x = true_alpha, y  = rnk), inherit.aes = FALSE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}