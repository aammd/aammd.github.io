{
  "hash": "94eab731baaa79a54ca48e10b2a82631",
  "result": {
    "markdown": "---\ntitle: \"Latent continuous variables\"\nauthor: \"Andrew MacDonald\"\ndescription: |\n  Modelling continuous latent states in Stan.\ndate: 20 March 2023\neditor: source\ncategories: [UdeS, stan]\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\nImagine we have many measurments, all correlated with each other. Where do these correlations come from?\nOne possibility is that all these measurents are _caused_ by the values of some unobservable, latent trait. \nThis happens in ecology when we imagine that, for example, the **Competitive Ability** of a species appears to us in the form of measurable traits that (to us) seem to represent this trait: leaf size, growth rate, alleopathy, etc. \n\n\n::: {.cell}\n\n:::\n\n\n\nlet's start with latent traits\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nalpha <- runif(200, min = -2, max = 2)\n\nfive_betas <- c(2,-1, .5, 1, -.3)\n\nsigma_obs <- .6\n\nymean <- alpha %o% five_betas\n\n## sample a random number for each of these and put in back\n\nind <- which(ymean != 0, arr.ind = TRUE)\n\nyobs <- matrix(rep(0L, times = 200*5), nrow = 200, ncol = 5)\nyobs[ind] <- rnorm(n = 200*5, mean = ymean[ind], sd = sigma_obs)\n```\n:::\n\n\n:::{.callout-warning}\nMy toxic trait is that I like for-loops but never write them\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(yobs)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.5.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /Users/amacdonald/.cmdstan/cmdstan-2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.31.0\n```\n:::\n\n```{.r .cell-code}\nlatent_continuous <- cmdstan_model(\n  stan_file = here::here(\"posts/2023-03-20-latent-continuous/latent_continuous.stan\"))\n\n\ndatalist <- list(N = nrow(yobs),\n                 y = yobs)\n\nlatent_cont_samp <- latent_continuous$sample(\n  data = datalist, parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 10.1 seconds.\nChain 2 finished in 10.1 seconds.\nChain 3 finished in 10.0 seconds.\nChain 4 finished in 10.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 10.1 seconds.\nTotal execution time: 10.4 seconds.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_cont_samp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n variable   mean median    sd   mad      q5    q95 rhat ess_bulk ess_tail\n lp__     -89.68 -89.40 14.47 14.69 -113.82 -66.26 1.01      466     1314\n beta[1]   -0.01   0.00  2.27  3.35   -2.42   2.41 1.74        6      159\n beta[2]    0.00   0.02  1.18  1.75   -1.27   1.27 1.75        6      115\n beta[3]    0.00   0.00  0.60  0.88   -0.66   0.66 1.74        6      125\n beta[4]    0.00  -0.03  1.17  1.73   -1.26   1.26 1.74        6      117\n beta[5]    0.00   0.00  0.35  0.51   -0.40   0.40 1.74        6      128\n sigma      0.60   0.60  0.01  0.01    0.57   0.62 1.00     4610     2803\n alpha[1]   0.00  -0.13  1.06  1.54   -1.31   1.30 1.73        6      127\n alpha[2]   0.00  -0.01  0.52  0.72   -0.74   0.74 1.73        6      129\n alpha[3]   0.00   0.01  0.48  0.65   -0.70   0.69 1.73        6      113\n\n # showing 10 of 207 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n```\n:::\n:::\n\n\nthat was.. a spectacular failure! is there a way that actully works\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\nlatent_cont_constrained <- cmdstan_model(\n  stan_file = here::here(\n    \"posts/2023-03-20-latent-continuous/latent_cont_constrained.stan\"))\n\nlatent_cont_constrained_samp <- latent_cont_constrained$sample(\n  data = datalist, parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c943da0867.stan', line 23, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c943da0867.stan', line 23, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 2 finished in 10.4 seconds.\nChain 4 finished in 10.5 seconds.\nChain 1 finished in 10.7 seconds.\nChain 3 finished in 10.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 10.6 seconds.\nTotal execution time: 10.9 seconds.\n```\n:::\n\n```{.r .cell-code}\n# tidybayes::get_variables(latent_cont_constrained_samp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntidybayes::gather_rvars(latent_cont_constrained_samp, betatrans[id]) |> \n  mutate(true_value = five_betas) |> \n  ggplot(aes(x = id, dist  = .value)) + \n  tidybayes::stat_halfeye(fill = \"darkgreen\") + \n  geom_point(aes(x = id, y = true_value), pch = 21, fill = \"orange\", size = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthietic with geom_segment was deprecated in ggplot2 3.4.0.\nâ„¹ Please use the `linewidth` aesthetic instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nSo it seems that with some simple constraints on the signs, this model samples just fine! \n\n\nDoes it also get the latent states right? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidybayes::summarise_draws(latent_cont_constrained_samp, quantile) |> \n  filter(stringr::str_detect(variable, \"alpha\")) |> \n  bind_cols(true_alpha = alpha) |> \n  mutate(id = readr::parse_number(variable),\n         rnk = dense_rank(true_alpha)) |> \n  ggplot(aes(x = `25%`, xend = `75%`, y = rnk, yend = rnk)) + \n  geom_segment() + \n  geom_point(aes(x = true_alpha, y  = rnk), inherit.aes = FALSE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nWhat if we experiment with a standard deviation for the alpha (ie a hierarchical model)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatent_cont_constr_hier <- cmdstan_model(\n  stan_file = here::here(\"posts/2023-03-20-latent-continuous/latent_cont_constr_hier.stan\"))\n\nlatent_cont_constr_hier_samp <- latent_cont_constr_hier$sample(\n  data = datalist, parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c940a3b623.stan', line 24, column 4 to column 32)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/var/folders/x7/l08zn2396g797m5ws54np_6w0000gp/T/Rtmpi4HWQ5/model-72c940a3b623.stan', line 28, column 2 to column 29)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 4 finished in 17.8 seconds.\nChain 3 finished in 18.2 seconds.\nChain 2 finished in 20.1 seconds.\nChain 1 finished in 20.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 19.1 seconds.\nTotal execution time: 20.5 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 4 of 4 chains had an E-BFMI less than 0.2.\nSee https://mc-stan.org/misc/warnings for details.\n```\n:::\n\n```{.r .cell-code}\ntidybayes::summarise_draws(latent_cont_constr_hier_samp, quantile) |> \n  filter(stringr::str_detect(variable, \"alpha\\\\[\")) |> \n  bind_cols(true_alpha = alpha) |> \n  mutate(id = readr::parse_number(variable),\n         rnk = dense_rank(true_alpha)) |> \n  ggplot(aes(x = `25%`, xend = `75%`, y = rnk, yend = rnk)) + \n  geom_segment() + \n  geom_point(aes(x = true_alpha, y  = rnk), inherit.aes = FALSE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}