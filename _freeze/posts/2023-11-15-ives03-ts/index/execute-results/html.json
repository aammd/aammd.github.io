{
  "hash": "5a3564dfe06da2804b0c2b09d5f15096",
  "result": {
    "markdown": "---\ntitle: \"Reproduction of Ives 2003\"\nauthor: \"Andrew MacDonald\"\ndescription: |\n  Autoregressive models.\ndate: 17 Nov 2023\neditor: source\ncategories: [UdeS, stan, reproduction, MAR]\nbibliography: references.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\n```\n:::\n\n\n## Background\n\nHow do species populations change over time?\n\nHow much of that change is caused by interactions with their community?\n\n20 years ago a very influential paper was written by Ives, Dennis, Cottingham and Carpenter [@ives2003].\nIves et al. present a method called a first-order Multivariate AutoRegressive model, also known as MAR(1). The core idea is that species are growing in a density-dependent way, but at a rate that is influenced by the per-capita effects of every other interacting population.\nA transition matrix captures the effects of each species on every other, and lets us predict how the vector species abundances changes over time. \n\n\nIves et al. advance this argument by beginning with univariate (single-species) approach, and that is what this post is about. Perhaps a future post will cover all the models.\n\n$$\n\\begin{align}\nn_t &= n_{t - 1}e^{a + (b - 1)ln(n_{t-1})} \\\\\nln(n_t) = x_t &= a + bx_{t - 1} \n\\end{align}\n$$\nWe can predict the curve at any time $t$ with this expression, from finite series:\n\n$$\nx_t = x_\\infty + b^t(x_0 - x_\\infty)\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(200 + (.9)^x * (4 - 200), xlim = c(0, 100))\n```\n\n::: {.cell-output-display}\n![Curve of a Gompertz growth model.](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nHowever there might be variation every time step because growth rate differences are caused by lots of unmeasured things.\n\n$$\n\\begin{align}\nX_t &= a + bX_{t-1} + \\epsilon_t \\\\\n\\epsilon &\\sim \\text{Normal}(0, \\sigma)\n\\end{align}\n$$\n\nThis leads to a mean and variance at time $t = \\infty$\n\n$$\n\\begin{align}\n\\mu_\\infty &= \\frac{a}{1 - b} \\\\\nv_\\infty &= \\frac{\\sigma^2}{1 - b^2}\n\\end{align}\n$$\n\n\nand the mean and variance at time $t$\n\n$$\n\\begin{align}\n\\mu_t &= \\mu_\\infty + b^t(x_0 - \\mu_\\infty) \\\\\nv_t &= \\sigma^2\\frac{1 - (b^2)^t}{1 - b^2} = v_\\infty(1 - b^{2t})\n\\end{align}\n$$\nEverything here is on the log scale. \nThe result is something that we can work with in a model for the likelihood -- the mean and variance of a normal distribution.\n\n## Simulations\n\nHere are simulations from a one-species AR-1 model that imitate Ives et al. figure 1.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nsimulate_pop_growth <- function(\n    a = 0, \n    b, \n    sigma = 1, \n    tmax = 50, \n    x0 = -8) {\n  \n  xvec <- numeric(tmax)\n  \n  xvec[1] <- x0\n  \n  ## process error\n  eta <- rnorm(tmax, mean = 0, sd = sigma)\n  \n  for(time in 2:tmax){\n    xvec[time] <- a + b*xvec[time-1] + eta[time]\n  }\n  \n  return(xvec)\n}\n\nmap_dfr(1:10, ~ tibble(pop = simulate_pop_growth(b = 0.6, tmax = 50),\n                       time = 1:length(pop)), .id = \"sim\") |> \n  ggplot(aes(x = time, y = pop, group = sim)) + \n  geom_line() + \n  geom_hline(yintercept = 0) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![Growth with a = 0, b = .6, sigma = 1](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmap_dfr(1:10, ~ tibble(pop = simulate_pop_growth(b = 0.95, tmax = 50),\n                       time = 1:length(pop)), .id = \"sim\") |> \n  ggplot(aes(x = time, y = pop, group = sim)) + \n  geom_line() + \n  geom_hline(yintercept = 0)+ \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![Growth with a = 0, b = .95, sigma = 1](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\n\nIt's fun to take a look at this curve after exponentiating it, so as to see the real population sizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dfr(1:10, \n        ~ tibble(pop = simulate_pop_growth(\n          a = 3, b = 0.4, tmax = 10, sigma = 0.03),\n          time = 1:length(pop)), .id = \"sim\") |> \n  ggplot(aes(x = time, y = exp(pop), group = sim)) + \n  geom_line() + \n  geom_hline(yintercept = 0, lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Functions for the mean and variance\n\nWe can also get a plot of the changing mean and variance over time. Just from playing with these, we can see what the simulations earlier showed: that variance depends on both the process error $\\sigma$ and on the parameter that controls the amount of density dependence, $b$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_mean <- function(a, b, time, n_start){\n  mu_max <- a / (1 - b)\n  \n  mu_max + b^time * (n_start - mu_max)\n}\n\ncalc_var <- function(b, time, sigma){\n  bsq <- b^2\n  \n  var_max = sigma^2/(1 - bsq)\n  \n  var_max * (1 - bsq^time)\n}\n\ncurve(calc_mean(0, .8, n_start = -8, time = x), xlim = c(0, 50))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncurve(calc_var(.9, time = x, sigma = 1),\n      xlim = c(0,50), ylim = c(0, 10))\n\ncurve(calc_var(.8, time = x, sigma = 1), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\nDo these numbers reflect the distribution we see in the simulations?\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nset.seed(5002)\nsome_sims <- map_dfr(1:300, ~ tibble(pop = simulate_pop_growth(b = 0.9, tmax = 30),\n                       time = 0:(length(pop)-1)), .id = \"sim\")\n\nsim_meanvar <- some_sims |> \n  group_by(time) |> \n  summarize(sim_mean = mean(pop),\n            sim_var = var(pop))\n\nsome_sims |> \n  filter(time == 22) |> \n  pluck(\"pop\") |> \n  hist(probability = TRUE, breaks = 30, xlab = \"population size (log)\", main = \"Simulated and predicted population size distribution\")\n\ncurve(dnorm(x, \n            mean = calc_mean(a = 0, b = .9, time = 22, n_start = -8),\n            sd = sqrt(calc_var(b = .9, time = 22, sigma = 1))), \n      add = TRUE)\n```\n\n::: {.cell-output-display}\n![Simulations match the theoretical predictions very closely.  Math works!](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\na_fig <- 0\nb_fig <- 0.8\nnstart_fig <- -8\nsigma_fig <- 1\n\ntibble(\n  time = 0:25,\n  mean = calc_mean(\n    a = a_fig, b = b_fig, time = time,\n    n_start = nstart_fig),\n  sd = sqrt(calc_var(\n    b = b_fig, time = time, sigma = sigma_fig))) |> \n  ggplot(aes(x = time,\n             ymin = mean - sd*2,\n             ymax = mean + sd*2, \n             y = mean)) + \n  geom_ribbon(fill = \"lightblue\")+\n  geom_line(col = \"darkblue\", lwd = 2) + \n  geom_line(\n    aes(x = time,\n        y = pop, \n        group = sim),\n    inherit.aes = FALSE,\n    data = map_dfr(1:10, \n                   ~ tibble(\n                     pop = simulate_pop_growth(\n                       a = a_fig, \n                       b = b_fig,\n                       tmax = 25, \n                       sigma = sigma_fig),\n                     time = 0:(length(pop)-1)\n                     ),\n                   .id = \"sim\"\n                   )\n  ) + \n  NULL + \n  labs(x = \"Time\", y = \"log population size\")\n```\n\n::: {.cell-output-display}\n![Simulations match the theoretical predictions very closely.  Math works!](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n## Aphids\n\nBelow I explore this model and try to fit some examples in Stan.\nI'm building this example to match work being done at UdeS by students of [Matt Barbour](https://www.mattbarbour.com/research). In these experiments, a single aphid is placed on a radish plant. Aphids are clonal, and give birth to live (!) young. \n\nEach colony, incredibly, starts with a single aphid. This simplifies the expressions for the average and the variance because the starting population size is $ln(1) = 0$\n\n$$\n\\begin{align}\n\\mu_t &= a\\frac{1 - b^t}{1 - b} &= \\mu_\\infty(1 - b^t) \\\\\nv_t &= \\sigma^2\\frac{1 - (b^2)^t}{1 - b^2} &= v_\\infty(1 - b^{2t})\n\\end{align}\n$$\n\nThe entire experiment fits on a single tray in a growth chamber, and Katerie replicated the experiment 6 times.\n\n\n## Make fake data\n\nSimulating from the data-generating model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_one_gompertz <- function(K = 1000, \n         a = 1, \n         b = 0.86,\n         s = .3,\n         ntime = 15){\n  \n  N = c(0, \n        rnorm(ntime - 1, \n              mean = a * (1 - b^(1:(ntime-1))) / (1 - b),\n              sd = s * (1 - (b^2)^(1:(ntime-1))) / (1 - b^2)\n        )\n  )\n        \n        \n  return(tibble(N = N, time = 0:(ntime-1)))\n}\n\nmap_df(1:6, ~ list(sim_one_gompertz()), .id = \"sim_id\") |> \n  ggplot(aes(x = time, y = N, group = sim_id)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the model in stan\nar_1 <- cmdstan_model(here::here(\"posts/2023-11-15-ives03-ts/ar1.stan\"))\n\nar_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata{\n  int n;\n  vector[n] time;\n  vector[n] x;\n}\n// transformed data {\n//   vector[n] x = log(pop);\n// }\nparameters {\n  real a;\n  real<lower=0,upper=1> b;\n  real<lower=0> sigma;\n}\ntransformed parameters {\n  real mu_max = a / (1 - b);\n  real sigma_max = sigma /sqrt(1 - b^2);\n}\nmodel {\n  a ~ normal(2, .5);\n  b ~ beta(5,2);\n  sigma ~ exponential(5);\n  x ~ normal(\n    mu_max .* (1 - pow(b, time)),\n    sigma_max .* sqrt(1 - pow(b^2, time))\n    );\n}\ngenerated quantities {\n  vector[15] x_pred;\n  x_pred[1] = 0;\n  for (j in 1:14) {\n    x_pred[j+1] = normal_rng(\n      mu_max * (1 - pow(b, j)),\n      sigma_max * sqrt(1 - pow(b^2, j))\n      );\n  }\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngomp_one_pop_df <- map_df(1:6, ~ list(\n  sim_one_gompertz()), .id = \"sim_id\")\n  \n  \ngomp_nozero <- gomp_one_pop_df  |> \n    filter(time != 0)\n\ngomp_ar_1_sample <- ar_1$sample(data = list(n = nrow(gomp_nozero),\n                        x = gomp_nozero$N,\n                        time = gomp_nozero$time),\n                        parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.6 seconds.\nChain 2 finished in 0.5 seconds.\nChain 3 finished in 0.5 seconds.\nChain 4 finished in 0.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.6 seconds.\nTotal execution time: 0.8 seconds.\n```\n:::\n:::\n\n::: {.cell .preview-image}\n\n```{.r .cell-code}\ngomp_ar_1_sample |> \n  spread_rvars(x_pred[time]) |> \n  ggplot(aes(x = time-1, ydist = x_pred)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\", direction = -1) + \n  theme_bw() + \n  geom_line(aes(x = time, y = N, group = sim_id),\n            inherit.aes = FALSE, data = gomp_one_pop_df) + \n  labs(x = \"Time\", y = \"log population size\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngomp_ar_1_sample$summary(variables = c(\"a\", \"b\", \"sigma\",\n                                       \"mu_max\", \"sigma_max\")) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|variable  |      mean|    median|        sd|       mad|        q5|       q95|     rhat| ess_bulk| ess_tail|\n|:---------|---------:|---------:|---------:|---------:|---------:|---------:|--------:|--------:|--------:|\n|a         | 0.9098355| 0.9063220| 0.0686223| 0.0670780| 0.8005618| 1.0257205| 1.003307| 1030.106| 1314.908|\n|b         | 0.8789703| 0.8794605| 0.0195818| 0.0192753| 0.8459716| 0.9102432| 1.003239| 1013.561| 1250.140|\n|sigma     | 0.5482239| 0.5452855| 0.0489006| 0.0485707| 0.4737331| 0.6320994| 1.005132| 1197.362| 1523.607|\n|mu_max    | 7.6344214| 7.5211700| 0.7723139| 0.6918331| 6.5748975| 9.0189875| 1.001850| 1176.005| 1381.095|\n|sigma_max | 1.1568230| 1.1484850| 0.0972406| 0.0928182| 1.0142685| 1.3257135| 1.002568| 1713.400| 1761.835|\n:::\n:::\n\n\n\n\n## Say it again but different: parameterizing based on $\\mu$ and $\\sigma$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the model in stan\nar1_mu_sigma <- cmdstan_model(here::here(\"posts/2023-11-15-ives03-ts/ar1_mu_sigma.stan\"))\n\nar1_mu_sigma\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.stan}\ndata{\n  int n;\n  vector[n] time;\n  vector[n] x;\n}\n// transformed data {\n//   vector[n] x = log(pop);\n// }\nparameters {\n  real mu_max;\n  real<lower=0,upper=1> b;\n  real<lower=0> sigma_max;\n}\ntransformed parameters {\n  // real mu_max = a / (1 - b);\n  // real sigma_max = sigma /sqrt(1 - b^2);\n}\nmodel {\n  mu_max ~ normal(7, .5);\n  b ~ beta(5,2);\n  sigma_max ~ exponential(1);\n  x ~ normal(\n    mu_max .* (1 - pow(b, time)),\n    sigma_max .* sqrt(1 - pow(b^2, time))\n    );\n}\ngenerated quantities {\n  vector[15] x_pred;\n  x_pred[1] = 0;\n  for (j in 1:14) {\n    x_pred[j+1] = normal_rng(\n      mu_max * (1 - pow(b, j)),\n      sigma_max * sqrt(1 - pow(b^2, j))\n      );\n  }\n}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngomp_ar1_mu_sigma_sample <- ar1_mu_sigma$sample(data = list(n = nrow(gomp_nozero),\n                        x = gomp_nozero$N,\n                        time = gomp_nozero$time),\n                        parallel_chains = 4, refresh = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 Exception: normal_lpdf: Scale parameter[1] is nan, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpsPJFNU/model-1ec42fb87ed4.stan', line 22, column 2 to line 25, column 6)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 1 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 Exception: normal_lpdf: Scale parameter[1] is 0, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpsPJFNU/model-1ec42fb87ed4.stan', line 22, column 2 to line 25, column 6)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 Exception: normal_lpdf: Scale parameter[1] is nan, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpsPJFNU/model-1ec42fb87ed4.stan', line 22, column 2 to line 25, column 6)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 3 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Exception: normal_lpdf: Scale parameter[1] is nan, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpsPJFNU/model-1ec42fb87ed4.stan', line 22, column 2 to line 25, column 6)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Exception: normal_lpdf: Scale parameter[1] is nan, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpsPJFNU/model-1ec42fb87ed4.stan', line 22, column 2 to line 25, column 6)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 Exception: normal_lpdf: Scale parameter[1] is nan, but must be positive! (in 'C:/Users/UTILIS~1/AppData/Local/Temp/RtmpsPJFNU/model-1ec42fb87ed4.stan', line 22, column 2 to line 25, column 6)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChain 4 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nChain 1 finished in 0.5 seconds.\nChain 2 finished in 0.4 seconds.\nChain 3 finished in 0.4 seconds.\nChain 4 finished in 0.5 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.5 seconds.\nTotal execution time: 0.7 seconds.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngomp_ar1_mu_sigma_sample |> \n  spread_rvars(x_pred[time]) |> \n  ggplot(aes(x = time-1, ydist = x_pred)) + \n  stat_lineribbon() + \n  scale_fill_brewer(palette = \"Greens\", direction = -1) + \n  theme_bw() + \n  geom_line(aes(x = time, y = N, group = sim_id),\n            inherit.aes = FALSE, data = gomp_one_pop_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngomp_ar1_mu_sigma_sample$summary(variables = c(\"mu_max\", \"b\", \"sigma_max\")) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|variable  |      mean|    median|        sd|       mad|        q5|       q95|     rhat| ess_bulk| ess_tail|\n|:---------|---------:|---------:|---------:|---------:|---------:|---------:|--------:|--------:|--------:|\n|mu_max    | 7.2318447| 7.2250250| 0.3901113| 0.3912878| 6.6053570| 7.8963640| 1.000893| 1365.238| 1827.017|\n|b         | 0.8707319| 0.8713065| 0.0133228| 0.0127037| 0.8470958| 0.8912064| 1.000917| 1332.414| 1584.640|\n|sigma_max | 1.1448564| 1.1377700| 0.0936798| 0.0882369| 1.0013000| 1.3126500| 1.000677| 2085.846| 2003.006|\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}